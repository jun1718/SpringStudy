21.02.16.10회차
===============================================================================
*mybatis환경구축,구문처리(score,board)
===============================================================================








##############################################################################
41)mybatis 환경구축

<package>
com.spring.database.mybatis.score.model 
com.spring.database.mybatis.score.controller
com.spring.database.mybatis.score.service
com.spring.database.mybatis.score.repository


<views/score>
이건 score2로 복사해라
그리고 그에따라 변경해야할것들 다 변경해라


1)옮기는거에 대한 호환성점검
	-위 패키지에 repository의 ScoreDAO 빼고 다 붙여놓고 아래조건처럼
		-IScoreDAO의 이름은 IScoreMapper로 변경하라
	-빈등록 id 다 2붙여라
	-controller, service 빈등록 id를 2를 붙여서 다 바꿔줘라 그후 service에서 DAO 안만들었으니까 잠시 autowired 주석처리
		해서 helloword 뜨는지 확인, database/mybatis/score2/register 되는지 확인
					database/score/register도 이상없이 되는지 확인
		-autowired를 안지우면 빈이 안등록됐는데 어떻게 만드냐고 에러뜬다 우리는 지금 1번에서는 IScoreMapper까지만
			만들었으니까 당연히 집어넣을 객체가 없으니 에러나지!
<controller 수정사항>
-controller에서 공용 url에 /mybatis 추가
-void형 String으로 변환(공용url때매)


2)라이브러리추가(pom.xml)
-mybatis 라이브러리 추가
		<dependency>
		    <groupId>org.mybatis</groupId>
		    <artifactId>mybatis</artifactId>
		    <version>3.4.6</version>
		</dependency>

-마이바티스와 스프링을 연동해주는 라이브러리 추가
		<dependency>
		    <groupId>org.mybatis</groupId>
		    <artifactId>mybatis-spring</artifactId>
		    <version>1.3.2</version>
		</dependency>
-저장 후 메이븐적용


3)jdbc템플릿 빈등록한거 밑에 mybatis 핵심객체등록
	-사실 jdbc템플릿은 이제 안쓸꺼니 지워도됨
root-context에서 해라


##############################################################################

답:


#pom.xml

<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.spring</groupId>
	<artifactId>db</artifactId>
	<name>SpringDBAccess</name>
	<packaging>war</packaging>
	<version>1.0.0-BUILD-SNAPSHOT</version>
	<properties>
		<java-version>1.8</java-version>
		<org.springframework-version>5.1.5.RELEASE</org.springframework-version>
		<org.aspectj-version>1.6.10</org.aspectj-version>
		<org.slf4j-version>1.6.6</org.slf4j-version>
	</properties>
	<dependencies>
		<!-- Spring -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${org.springframework-version}</version>
			<exclusions>
				<!-- Exclude Commons Logging in favor of SLF4j -->
				<exclusion>
					<groupId>commons-logging</groupId>
					<artifactId>commons-logging</artifactId>
				 </exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${org.springframework-version}</version>
		</dependency>
				
		<!-- spring-jdbc -->
		<dependency>
		    <groupId>org.springframework</groupId>
		    <artifactId>spring-jdbc</artifactId>
		    <version>${org.springframework-version}</version>
		</dependency>
		
		<!-- 마이바티스 라이브러리 추가 -->
		<dependency>
		    <groupId>org.mybatis</groupId>
		    <artifactId>mybatis</artifactId>
		    <version>3.4.6</version>
		</dependency>
		
		<!-- 마이바티스와 스프링을 연동해주는 라이브러리 -->
		<dependency>
		    <groupId>org.mybatis</groupId>
		    <artifactId>mybatis-spring</artifactId>
		    <version>1.3.2</version>
		</dependency>
		
		
		
		<!--  MySQL Connector/J  -->
		<dependency>
		    <groupId>mysql</groupId>
		    <artifactId>mysql-connector-java</artifactId>
		    <version>8.0.15</version>
		</dependency>
		
		<!--  HikariCP : Connection pool -->
		<!-- https://mvnrepository.com/artifact/com.zaxxer/HikariCP -->
		<dependency>
		    <groupId>com.zaxxer</groupId>
		    <artifactId>HikariCP</artifactId>
		    <version>2.7.8</version>
		</dependency>
				
		<!-- AspectJ -->
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjrt</artifactId>
			<version>${org.aspectj-version}</version>
		</dependency>	
		
		<!-- Logging -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${org.slf4j-version}</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
			<version>${org.slf4j-version}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
			<version>${org.slf4j-version}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.15</version>
			<exclusions>
				<exclusion>
					<groupId>javax.mail</groupId>
					<artifactId>mail</artifactId>
				</exclusion>
				<exclusion>
					<groupId>javax.jms</groupId>
					<artifactId>jms</artifactId>
				</exclusion>
				<exclusion>
					<groupId>com.sun.jdmk</groupId>
					<artifactId>jmxtools</artifactId>
				</exclusion>
				<exclusion>
					<groupId>com.sun.jmx</groupId>
					<artifactId>jmxri</artifactId>
				</exclusion>
			</exclusions>
			<scope>runtime</scope>
		</dependency>

		<!-- @Inject -->
		<dependency>
			<groupId>javax.inject</groupId>
			<artifactId>javax.inject</artifactId>
			<version>1</version>
		</dependency>
				
		<!-- Servlet -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>3.1.0</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.servlet.jsp</groupId>
			<artifactId>jsp-api</artifactId>
			<version>2.1</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
		</dependency>
	
		<!-- Test -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>
			<scope>test</scope>
		</dependency>        
	</dependencies>
    <build>
        <plugins>
            <plugin>
                <artifactId>maven-eclipse-plugin</artifactId>
                <version>2.9</version>
                <configuration>
                    <additionalProjectnatures>
                        <projectnature>org.springframework.ide.eclipse.core.springnature</projectnature>
                    </additionalProjectnatures>
                    <additionalBuildcommands>
                        <buildcommand>org.springframework.ide.eclipse.core.springbuilder</buildcommand>
                    </additionalBuildcommands>
                    <downloadSources>true</downloadSources>
                    <downloadJavadocs>true</downloadJavadocs>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.5.1</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                    <compilerArgument>-Xlint:all</compilerArgument>
                    <showWarnings>true</showWarnings>
                    <showDeprecation>true</showDeprecation>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>1.2.1</version>
                <configuration>
                    <mainClass>org.test.int1.Main</mainClass>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>



#root-context.xml

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd">
	
	<!-- JDBC, DB관련 빈을 등록하고 관리하는 설정파일 -->
	<!-- 히카리 커넥션풀 빈 등록  : 이건 우리가만든 클래스가 아니라서 안에서 Repository service로 자동빈등록
		불가하니까 직접 빈등록해줘야함-->
	<bean id = "hikariConfig" class = "com.zaxxer.hikari.HikariConfig">
		<property name = "driverClassName" value = "com.mysql.cj.jdbc.Driver" />
		<property name = "jdbcUrl" value = "jdbc:mysql://localhost:3306/spring?serverTimezone=Asia/Seoul" />
		<property name = "username" value = "root" />
		<property name = "password" value = "mysql" />
	</bean>
	
	<!--  히카리 데이터 소스 빈 등록 -->
	<bean id = "ds" class = "com.zaxxer.hikari.HikariDataSource">
		<constructor-arg ref = "hikariConfig"/> <!--  남이만든 라이브러리는 우리가직접의존성
				주입해야하니까 처음에 이런것들을 배운거다. -->
	</bean>
	
	<!--  JDBC 템플릿 클래스 빈 등록 -->
	<bean id = "jdbcTemplate" class = "org.springframework.jdbc.core.JdbcTemplate">
		<property name = "dataSource" ref = "ds"/>
	</bean>
	
	<!-- mybatis SQL 동작을 위한 핵심객체 SqlSessionFactory 클래스 빈 등록 -->
	<bean id = "sqlSessionFactory" class = "org.mybatis.spring.SqlSessionFactoryBean">
		<property name = "dataSource" ref = "ds" />
	</bean>
</beans>










##############################################################################
42)환경구축 및 insert, select, delete 구문 처리하기

폴더 : mappers-score
xml : ScoreMapper.xml
	-<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

1)핵심객체에 설정파일 ScoreMapper.xml 위치 알려주기
		-ScoreMapper.xml이 IScoreMapper의 구현클래스 역할을 함
	main resource에 있는 애들은 value 줄때 classpath:으로 알려줌

2)namespaces에서 mybatis-spring 체크해서 추가
	-이러면 root-context.xml의 beans에 mybatis 관련 코드가 추가됨

3)DAO 빈객체 만들기(이름은 IScoreMapper interface를 자동으로 새큰해서 빈등록 코드 적기)
	-beans graph해서 sqlSessionFactory와 IScoreMapper 빈 등록됨을 확인
4)이대로 실행하면 hello 안뜨는거 확인하고 ScoreMapper.xml에서 mapper의 namespace에 인터페이스 절대경로 적어주고나면 
	hello 되는거 확인

5)IScoreMapper.java의 insertScore() 메서드를 ScoreMapper.xml에 재정의하고 service에서는 
	autowired의 주석을 풀어라(앞문제에서 주석했었음) 그리고 hello 잘되는가 확인하라

6)insertScore, selectAllScores 메서드를 ScoreMapper.xml에 넣어서 브라우저에서 정상처리되도록 하라

7)삭제기능 잘되게 만들어라

8)개인조회기능 잘되게 만들어라

##############################################################################

답:






------------------------------
<model>
#ScoreVO

package com.spring.database.mybatis.score.model;

public class ScoreVO {
/*
 -- 점수 테이블 생성 : DB에 이렇게 작성하면됨 : 이름규칙도 java에서는 카멜인데 db에서는 _를 씀 그래도 다르게설정
CREATE TABLE scores (
	stu_id INT PRIMARY KEY AUTO_INCREMENT,
    stu_name VARCHAR(60) NOT NULL,
    kor INT,
    eng INT,
    math INT,
    total INT,
    average FLOAT(5, 2) -- 다섯자리수까지, 소수점표현은 두번째자리까지 최대수 -> 100.00 5자리에 소수점 2개 99.99면 4자리에 2 
);
 */
	
	private Integer stuId;
	private String stuName;
	private Integer kor;
	private Integer eng;
	private Integer math;
	private Integer total;
	private Double average;
	
	//총점 평균을 구하는 메서드
	public void calcData() {
		this.total = this.kor + this.eng + this.math;
		this.average = Math.round((this.total / 3.0) * 100) / 100.0;
		
	}
	
	
	public Integer getStuId() {
		return stuId;
	}
	public void setStuId(Integer stuId) {
		this.stuId = stuId;
	}
	public String getStuName() {
		return stuName;
	}
	public void setStuName(String stuName) {
		this.stuName = stuName;
	}
	public Integer getKor() {
		return kor;
	}
	public void setKor(Integer kor) {
		this.kor = kor;
	}
	public Integer getEng() {
		return eng;
	}
	public void setEng(Integer eng) {
		this.eng = eng;
	}
	public Integer getMath() {
		return math;
	}
	public void setMath(Integer math) {
		this.math = math;
	}
	public Integer getTotal() {
		return total;
	}
	public void setTotal(Integer total) {
		this.total = total;
	}
	public Double getAverage() {
		return average;
	}
	public void setAverage(Double average) {
		this.average = average;
	}
	
	
	@Override
	public String toString() {
		return "ScoreVO [stuId=" + stuId + ", stuName=" + stuName + ", kor=" + kor + ", eng=" + eng + ", math=" + math
				+ ", total=" + total + ", average=" + average + "]";
	}
	
	
	
}

------------------------------
<controller>
#ScoreController
package com.spring.database.mybatis.score.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.spring.database.mybatis.score.model.ScoreVO;
import com.spring.database.mybatis.score.service.IScoreService;

@Controller("scoreController2")
@RequestMapping("/mybatis/score2")
public class ScoreController {
	@Autowired
	@Qualifier("scoreService2")
	private IScoreService service;
	
	//점수 등록 화면을 열어주는 처리를 하는 요청메서드
	@GetMapping("/register")
	public String register() {
		System.out.println("/score/register: GET");
		return "score2/write-form";
	}
	
	//점수 등록을 처리하는 요청 메서드
	@PostMapping("/register")
	public String register(ScoreVO scores) {
		System.out.println("/score/register: POST");
		System.out.println("Controller param: " + scores);
		
		service.insertScore(scores);
		return "score2/write-result";
	}
	
	//점수 전체 조회를 처리하는 요청 메서드
	@GetMapping("/list")
	public String list(Model model) {
		System.out.println("/score/list: GET");
		List<ScoreVO> list = service.selectAllScores();
		model.addAttribute("sList", list);
		return "score2/list";
	}
	
	//점수 삭제 요청 처리 메서드
	@GetMapping("/delete")
	public String delete(@RequestParam("stuNum") int stuNum, RedirectAttributes ra) {
//		List<ScoreVO> list = service.selectAllScores();
		service.deleteScore(stuNum);
		ra.addFlashAttribute("message", "delSuccess");
		return "redirect:/mybatis/score2/list";
	}
	
	//점수 개별 조회 화면 열람요청 메서드
	@GetMapping("/search")
	public String search() {
		System.out.println("/score/search: GET");
		return "score2/search";
	}
	
	@PostMapping("/selectOne")
	public String selectOne(String stuNum, Model model, RedirectAttributes ra) {
		
		/*
		try {
			ScoreVO stu = service.selectOneScore(Integer.parseInt(stuNum));			
			model.addAttribute("stu", stu);
			return "/score/select-result";
		} catch(NumberFormatException e) {
			ra.addFlashAttribute("message", "숫자로만 입력하세요!");
			return "redirect:/score/search"; 
		} catch(IndexOutOfBoundsException e) {
			ra.addFlashAttribute("message", "학번정보가 없습니다.");
			return "redirect:/score/search";
		} 
		*/
		List<ScoreVO> list = service.selectAllScores();
		
		try {
			int n = Integer.parseInt(stuNum);
			if (n > list.size()) {
				ra.addFlashAttribute("message", "학번정보가 없습니다.");
				return "redirect:/mybatis/score2/search";
			}
			
			ScoreVO stu = service.selectOneScore(n);			
			model.addAttribute("stu", stu);
			return "score/select-result";
		} catch(NumberFormatException e) {
			ra.addFlashAttribute("message", "숫자로만 입력하세요!");
			return "redirect:/mybatis/score2/search"; 
		} 
	}
}

------------------------------
<service>
#IScoredService
package com.spring.database.mybatis.score.service;

import java.util.List;

import com.spring.database.mybatis.score.model.ScoreVO;

public interface IScoreService {
	//점수 등록 기능
	void insertScore(ScoreVO scores);
	
	//점수 전체 조회 기능
	List<ScoreVO> selectAllScores();
	
	//점수 삭제기능
	void deleteScore(int stuNum);
	
	ScoreVO selectOneScore(int stuNum);
	
}



#ScoreService
package com.spring.database.mybatis.score.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.spring.database.mybatis.score.repository.IScoreMapper;
import com.spring.database.mybatis.score.model.ScoreVO;


@Service("scoreService2")
public class ScoreService implements IScoreService {

	@Autowired
	private IScoreMapper dao;
	
	@Override
	public void insertScore(ScoreVO scores) {
		// TODO Auto-generated method stub
		scores.calcData();
		dao.insertScore(scores);
	}

	
	@Override
	public List<ScoreVO> selectAllScores() {
		// TODO Auto-generated method stub
		return dao.selectAllScores();
	}
	
	

	@Override
	public void deleteScore(int stuNum) {
		// TODO Auto-generated method stub
		dao.deleteScore(stuNum);
	}
	
	public ScoreVO selectOneScore(int stuNum) {
		return dao.selectOneScore(stuNum);
	}

}

------------------------------
<repository>
#IScoreDAO
package com.spring.database.mybatis.score.repository;

import java.util.List;

import com.spring.database.mybatis.score.model.ScoreVO;

public interface IScoreMapper {
	//점수 등록 기능
	void insertScore(ScoreVO scores);
	
	//점수 전체 조회 기능
	List<ScoreVO> selectAllScores();
	
	//점수 삭제기능
	void deleteScore(int stuNum);
	
	ScoreVO selectOneScore(int stuNum);
}

------------------------------
<main/resource/mappers/score>
#ScoreMapper.xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
<mapper namespace = "com.spring.database.mybatis.score.repository.IScoreMapper">
	<!-- DB컬럼명과 VO의 필드명을 맞추는 ResultMap 선언 -->
	<resultMap id = "ScoreMap" type = "com.spring.database.mybatis.score.model.ScoreVO">
		<id property = "stuId" column = "stu_id"/> <!--  primary key 매핑 -->
		<result property = "stuName" column = "stu_name" />
		<result property = "kor" column = "kor" />
		<result property = "eng" column = "eng" />
		<result property = "math" column = "math" />
		<result property = "total" column = "total" />
		<result property = "average" column = "average" />
	</resultMap>
	
	
	<!--  점수 등록 기능 -->
	<insert id = "insertScore">
		INSERT INTO scores 
		(stu_name, kor, eng, math, total, average)
		VALUES (#{stuName}, #{kor}, #{eng}, #{math}, #{total}, #{average})
	</insert>
	
	<!--  점수 목록 조회 기능 -->
	<select id = "selectAllScores" resultMap = "ScoreMap">
		SELECT * FROM scores
	</select>
	
	<!--  점수 삭제 기능 -->
	<delete id = "deleteScore">
		DELETE FROM scores WHERE stu_id = #{stuNum}
	</delete>
	
	
	<select id = "selectOneScore" resultMap = "ScoreMap">
		SELECT * FROM scores
		WHERE stu_id = #{stuNum}
	</select>
</mapper>


------------------------------
<views/board>
#write-form.jsp

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<h2>시험 점수 등록</h2>
<form method = "post">
	<p>
		# 이름 : <input type = "text" name = "stuName"><br>
		# 국어 : <input type = "text" name = "kor"><br>
		# 영어 : <input type = "text" name = "eng"><br>
		# 수학 : <input type = "text" name = "math"><br>
		<input type = "submit" value = "확인">
	</p>
</form>

</body>
</html>

#write-result.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
	<h2>점수 등록 성공!</h2>
	<a href = "/database/mybatis/score2/register">다른 점수 등록하기</a>
	<a href = "/database/mybatis/score2/list">점수 전체 조회</a>
	<a href = "/database/mybayis/score2/search">점수 개별 조회</a>

</body>
</html>


#list.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix = "c" uri = "http://java.sun.com/jsp/jstl/core" %>    
    
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
<h2>학생들의 전체  성적 조회</h2>
<c:forEach var = "stu" items = "${sList}">
	<p>
		# 학번 : ${stu.stuId}, 이름 : ${stu.stuName}, 국어 : ${stu.kor}, 영어 : ${stu.eng},
		 수학 : ${stu.math}, 총점 : ${stu.total}, 평균 : ${stu.average}
		&nbsp;
		<a href = "/database/mybatis/score2/delete?stuNum=${stu.stuId}">[삭제]</a>	
	</p>
</c:forEach>

<a href = "/database/mybatis/score2/register">다른 점수 등록하기</a> 
<a href = "/database/mybatis/score2/list">점수 전체 조회</a>
<a href = "/database/mybatis/score2/search">점수 개별 조회</a>

<script type = "text/javascript">
	const msg = "${message}";
	console.log(msg);
	if (msg === "delSuccess") {
		alert("점수 삭제 완료!");
	}
</script>


</body>
</html>


#search.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
<h2>개별 점수 조회</h2>
<form action = "/database/mybatis/score2/selectOne" method = "post">
	<p>
		#조회할 학번 : <input type = "text" name = "stuNum" size = "5">
				   <input type = "submit" value = "조회">
	</p>
</form>

<p style = "color:red;">
	${message}
</p>

</body>
</html>


#select-result.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
<h2>${stu.stuName}학생 성적 정보 조회</h2>

<p>	
	# 국어 : ${stu.kor} <br>
	# 영어 : ${stu.eng} <br>
	# 수학 : ${stu.math} <br>
	# 총점 : ${stu.total} <br>
	# 평균 : ${stu.average} 
</p>

<a href = "/database/mybatis/score2/register">다른 점수 등록하기</a> 
<a href = "/database/mybatis/score2/list">점수 전체 조회</a>
<a href = "/database/mybatis/score2/search">점수 개별 조회</a>

</body>
</html>

















##############################################################################
43)board 에도 mybatis로 실습하기
	-강사님이 qualifier 경험했으니 jdbc 파일로 그냥 사용하잖다
			-즉 board를 변경시키란 말
			-이렇게하면 repository 측만 변경하면됨
	
1)환경구축
	-repository에 IBoardMapper라는 interface 만들고 해당 interface에 IBoardDAO의 메소드를 모두 붙여넣기
	-service에 빈등록된 객체의 타입을 통해 찾는 autowired의 대상을 IBoardDAO에서 IBoardMapper로 변경
		-기존 auto는 주석
	-그러고 나서 서버실행하면 터짐. 왜냐면 아직 autowired될 타입의 빈객체(BoardDAO 인스턴스)가 등록되어 있지 않기때문임
		-servlet-content.xml파일에 자동등록은 com.spring.database에서 알아서 찾아서 해당 클래스의 인스턴스를
		모두 자동 빈등록하라고 명시해놓은게 있음 하지만 그 자동 빈등록할 클래스조차 없다는 뜻임
		<context:component-scan base-package="com.spring.database" />
	-그래서 auto만 주석으로 두고 다시 실행
		-서버 잘됨 
		-하지만 list를 입력하면 null pointer excetion이 뜸을 확인
		
2)위 1번 마지막에 null pointer가 안뜨도록 xml부터 여러가지 설정하여 list 부터 모든 기능이 잘 동작하도록 만드시오
##############################################################################

답:









------------------------------
<repository>
#IBoardMapper

package com.spring.database.jdbc.board.repository;

import java.util.List;

import com.spring.database.jdbc.board.model.BoardVO;

public interface IBoardMapper {
		//게시글 목록 가져오기
		List<BoardVO> getArticles();
		
		//게시글 등록
		void insertArticle(BoardVO article);
		
		//게시글 삭제
		void deleteArticle(int boardNo);
		
		//게시글 내용보기
		BoardVO getContent(int boardNo);
		
		//게시글 수정
		void modifyArticle(BoardVO article);
		
		//게시글 검색
		List<BoardVO> getSearchList(String keyword);
}




------------------------------
<main/resources/mappers/board>
#BoardMapper.xml

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
<mapper namespace = "com.spring.database.jdbc.board.repository.IBoardMapper">

	<resultMap id = "BoardMap" type = "com.spring.database.jdbc.board.model.BoardVO">
		<id property = "boardNo" column = "board_no"/>
		<result property = "writer" column = "writer" />
		<result property = "title" column = "title" />
		<result property = "content" column = "content" />
	</resultMap>

	<!--  게시글 목록 조회 -->
	<select id = "getArticles" resultMap = "BoardMap">
		SELECT * FROM jdbc_board
		ORDER BY board_no DESC
	</select>
	
	<!--  게시글 등록 -->
	<insert id = "insertArticle">
		INSERT INTO jdbc_board 
		(writer, title, content)
		VALUES (#{writer}, #{title}, #{content})
	</insert>
	
	<!--  게시글 삭제 -->
	<delete id = "deleteArticle">
		DELETE FROM jdbc_board
		WHERE board_no = #{boardNo}
	</delete>
	
	<!-- 게시글 내용보기-->
	<select id = "getContent" resultMap = "BoardMap">
		SELECT * FROM jdbc_board
		WHERE board_no = #{boardNo}
	</select>
	
	<!--  게시글 수정 -->
	<update id = "modifyArticle">
		UPDATE jdbc_board
		SET writer = #{writer}, title = #{title}, content = #{content}
		WHERE board_no = #{boardNo}
	</update>
	
	<!-- 게시글 검색 -->
	<select id = "getSearchList" resultMap = "BoardMap">
		SELECT * FROM jdbc_board
		WHERE writer like #{keyword}
		ORDER BY board_no DESC
	</select>
</mapper>


------------------------------
<root-content.xml> : 마지막한줄 추가된거임

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd">
	
	<!-- JDBC, DB관련 빈을 등록하고 관리하는 설정파일 -->
	<!-- 히카리 커넥션풀 빈 등록  : 이건 우리가만든 클래스가 아니라서 안에서 Repository service로 자동빈등록
		불가하니까 직접 빈등록해줘야함-->
	<bean id = "hikariConfig" class = "com.zaxxer.hikari.HikariConfig">
		<property name = "driverClassName" value = "com.mysql.cj.jdbc.Driver" />
		<property name = "jdbcUrl" value = "jdbc:mysql://localhost:3306/spring?serverTimezone=Asia/Seoul" />
		<property name = "username" value = "root" />
		<property name = "password" value = "mysql" />
	</bean>
	
	<!--  히카리 데이터 소스 빈 등록 -->
	<bean id = "ds" class = "com.zaxxer.hikari.HikariDataSource">
		<constructor-arg ref = "hikariConfig"/> <!--  남이만든 라이브러리는 우리가직접의존성
				주입해야하니까 처음에 이런것들을 배운거다. -->
	</bean>
	
	<!--  JDBC 템플릿 클래스 빈 등록 -->
	<bean id = "jdbcTemplate" class = "org.springframework.jdbc.core.JdbcTemplate">
		<property name = "dataSource" ref = "ds"/>
	</bean>
	
	<!-- mybatis SQL 동작을 위한 핵심객체 SqlSessionFactory 클래스 빈 등록 -->
	<bean id = "sqlSessionFactory" class = "org.mybatis.spring.SqlSessionFactoryBean">
		<property name = "dataSource" ref = "ds" />
		<property name = "mapperLocations" value = "classpath:/mappers/**/*Mapper.xml" />
	</bean>
	
	<!--  interface가 namespace로 구현된 마이바티스 xml 파일(class역할)을 빈 객체로 등록하기 위한 스캔 설정 -->
	<mybatis-spring:scan base-package="com.spring.database.mybatis.score.repository"/>



	<mybatis-spring:scan base-package="com.spring.database.jdbc.board.repository"/>
</beans>





















------------------------------
<model>
#BoardVO


------------------------------
<controller>
#BoardController

------------------------------
<service>
#IBoardService
#BoardService

------------------------------
<repository>
#IBoardDAO

#BoardDAO

------------------------------
<views/board>
#write.jsp

#list.jsp

#content.jsp

#modify.jsp


