21.02.07.4회차
===============================================================================
*복습
===============================================================================









##############################################################################
22)공통 uri 매핑, 반환값 없는 메소드, context root 매칭시키기, 톰캣한글설정

1)RequestController나 혹은 다른 컨트롤러 내부에서 특정 uri를 공통으로 매핑하여라
	모든 uri를 받는 아노테이션들에 /request를 하지 않아도 /request를 포함한 uri로 아노테이션이
	수신받도록 하여라
	*String형으로 반환할때는 /request를 붙여줘야함
		-다만 void형으로 자동 반환되게할때는 /request가 붙음
	*그리고 반환할때 / 붙여도 되고 안붙여도됨

-----------------------------------------------------------

2)아래 req-ex02.jsp를 만들고 RequestController에서 특정 메소드를 반환값없도록 만들었지만
	viewResolver에는 값이 잘 전달되도록 만드시오.
	-homeController에서 /test uri가 요청된 경우에 void로 메서드를 구성해서 test.jsp페이지가
		열리도록 해보시오.

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
	<h2>req-ex02.jsp 파일입니다!</h2>
</body>
</html>

-----------------------------------------------------------
3)jsp만 만지면 되는 문제이다.

3-1)아래 join.jsp를 이용하여 반환값 void일때 공통uri 포함하여 반환
uri로 /request/join이(/web/request/join) 들어왔을때 Controller 메소드 register()
	를 만든뒤 반환값을 void로 하여 views/request/join.jsp가 열리도록 하세요.

3-2)아래 join.jsp를 이용하여 context root 매칭시키기

	-c태그의 특정속성을 이용하여 path 변수를 만들어서 변수에 context root 집어넣은뒤 사용하기
		-path변수는 해당 프로젝트내의 어디서든 사용될수 있도록하여라
	-c태그의 특정속성을 이용하여 변수를 만들지 않고 context root 사용하기


<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
    
<%--
	#컨텍스트 루트 경로가 변경될 경우 처리방법
	1.컨텍스트 루트 경로를 변수로 지정함
	2.<c:url> 태그를 사용
 --%>
 
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
<h2>요청 파라미터값 테스트!!</h2>

<form action = "" method = "post"> 	
	<fieldset>
		<legend>회원가입 양식</legend>
		<p>
			- ID : <input type = "text" name = "userId" size = "10"> <br>
			- PW : <input type = "password" name = "userPw" size = "10"> <br>
			- NAME : <input type = "text" name = "userName" size = "10"> <br>
			- HOBY :
			<input type = "checkbox" name = "hobby" value = "soccer" > 축구&nbsp;
			<input type = "checkbox" name = "hobby" value = "book" > 독서&nbsp;
			<input type = "checkbox" name = "hobby" value = "music" > 음악&nbsp;
			<br>
			<input type = "submit" value = "회원가입" />
		</p>
	</fieldset>
</form>

</body>
</html>

****컨텍스트 루트 경로가 변경될 경우 처리방법 : 유지보수가 편하다.

-----------------------------------------------------------
4)4-1, 4-2의 답은 같다. 둘중하나라도 처리하면 모두 해결이 된다.
	문제를 해결하라(톰캣설정과 관련된 web.xml을 이용하라)

4-1)컨텍스트 루트만포함한 url을 검색했을때 한국언어가 깨지는데 그걸해결해라
http://localhost:8080/web/

4-2)아래 url을 요청했을때 id등 post로 보낼 입력값에 한글을치면 깨지는데 그걸 해결해라
http://localhost:8080/web/request/join


package com.spring.web.controller;

import javax.servlet.http.HttpServletRequest;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

@Controller
@RequestMapping("/request")
public class RequestController {
	
	@RequestMapping("/test/request/test")
	public String test() {
		System.out.println("/test/request/test를 요청함");
		return "test";
	}
	
	@RequestMapping("/req")
	public String req() {
		System.out.println("/request/req 요청됨");
		return "request/req-ex01";
	}

//	@RequestMapping(value = "/request/basic01", method = RequestMethod.GET)
	@GetMapping("/basic01")
	public String basicGet() {
		System.out.println("/reqeust/basic01 요청됨 : GET방식");
		return "request/req-ex01";
	}
	
//	@RequestMapping(value = "/request/basic01", method = RequestMethod.POST)
	@PostMapping("/basic01")
	public String basicPost() {
		System.out.println("/reqeust/basic01 요청됨 : POST방식");
		return "request/req-ex01";
	}
	
	
	@RequestMapping(value = "/param", method = RequestMethod.GET)
	public String ex(HttpServletRequest request) {
		String name = request.getParameter("name");
		String age = request.getParameter("age");
		System.out.println("/request/param 요청");
		System.out.println("name : " + name);
		System.out.println("age : " + age);
		return "";
	}
	
	@RequestMapping(value = "/req-ex02", method = RequestMethod.GET)
	public void req1() {
		System.out.println("/request/req-ex01 요청됨 : GET");
	}
	
	@RequestMapping(value = "/join", method = RequestMethod.GET)
	public void register() {
		System.out.println("/request/join 호출됨 : GET");
	}
	
//	@RequestMapping(value = "/join", method = Request.POST)
//	public void register() {
//		
//	}
	
}




<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix = "c" uri = "http://java.sun.com/jsp/jstl/core" %>

<%--
<%@ taglib prefix = "c" uri = "http://java.sun.com/jsp/jstl/core" %>    
<c:set var = "path" value = "<%= request.getContextPath() %>" scope = "application" />
<%@ taglib prefix = "c" uri = "http://java.sun.com/jsp/jstl/core"  %>
<c:set var = "path" value = "<%= request.getContextPath() %>" scope = "application" />
<c:set var = "path" value = "<%= request.getContextPath()%>" scope = "application"/>
	#컨텍스트 루트 경로가 변경될 경우 처리방법
	1.컨텍스트 루트 경로를 변수로 지정함
	2.<c:url> 태그를 사용
 --%>


  
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
<h2>요청 파라미터값 테스트!!</h2>

<form action = "<c:url value = '/request/join' />" method = "post"> 	
	<fieldset>
		<legend>회원가입 양식</legend>
		<p>
			- ID : <input type = "text" name = "userId" size = "10"> <br>
			- PW : <input type = "password" name = "userPw" size = "10"> <br>
			- NAME : <input type = "text" name = "userName" size = "10"> <br>
			- HOBY :
			<input type = "checkbox" name = "hobby" value = "soccer" > 축구&nbsp;
			<input type = "checkbox" name = "hobby" value = "book" > 독서&nbsp;
			<input type = "checkbox" name = "hobby" value = "music" > 음악&nbsp;
			<br>
			<input type = "submit" value = "회원가입" />
		</p>
	</fieldset>
</form>

</body>
</html>



<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee https://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">

	<!-- The definition of the Root Spring Container shared by all Servlets and Filters -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/spring/mvc-config.xml</param-value>
	</context-param>
	
	<!-- Creates the Spring Container shared by all Servlets and Filters -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<!-- Processes application requests -->
	<servlet>
		<servlet-name>appServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>/WEB-INF/spring/servlet-config.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
		
	<servlet-mapping>
		<servlet-name>appServlet</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	
		<!-- 한글 인코딩 필터 설정(톰캣 내부의 한글처리) -->
	<filter>
	    <filter-name>encodingFilter</filter-name>
	    <filter-class>
				org.springframework.web.filter.CharacterEncodingFilter
			</filter-class>
	    <init-param>
	      <param-name>encoding</param-name>
	      <param-value>UTF-8</param-value>
	    </init-param>
	    <init-param>
	      <param-name>forceEncoding</param-name>
	      <param-value>true</param-value>
	    </init-param>
    </filter>
    <!-- 위에 지정한  encodingFilter이름을 모든 패턴에 적용-->
    <filter-mapping>
	    <filter-name>encodingFilter</filter-name>
	    <url-pattern>/*</url-pattern>
    </filter-mapping>
	

</web-app>


##############################################################################




답: 



#RequestController.java

package com.spring.web.controller;

import javax.servlet.http.HttpServletRequest;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;

import com.spring.web.model.UserVO;
import com.spring.web.model.UserVO2;

//클라이언트 측에서 요청을 보냈을때 그것을 처리하는 컨트롤러
//디스패쳐서블릿이라는 프론트 컨트롤러가 RequestController를 찾게하려면
//디스패쳐서블릿과 requestController의 의존관계를 설정을 해야한다.
//의존관계설정을 우리가 따로할 필요는 없고 해당 클래스에 대한 빈객체를 실행시 만들어지게만 하면된다.
//근데 helloController는 빈등록 코드를 자동으로 이루어지게 했으니 다른 컨트롤러들도 
//자동 빈등록 코드와 아노테이션을 이용하여 그러헥 만들면 된다.

@Controller	
@RequestMapping("/request") // 공통 uri 떼놓기
public class RequestController {

	//RequestMapping은 어떤 URI로 이 메서드를 동작시킬 것인가에 대한 설정임
	//이거 value = "", GET 이런 설정안하면 post든 get이든 모두 받겠다는 의미임
//	@RequestMapping("/request/test")
	@RequestMapping("/test") // 원래 위에처럼 해야하지만 클래스선언분위에 일괄매핑을 했어서 괜찮다.
	public String testCall() {
		System.out.println("/request/test 요청이 들어옴!");
		return "test";
	}
	
//	@RequestMapping("/request/req") // 이대로 두면 /request/request/req 해야지 온다.
	@RequestMapping("/req")
	public String req() {
		System.out.println("/request/req 요청이 들어옴~!");
		return "request/req-ex01";
	}
	
	@GetMapping("/req-ex02")
	public void reqEx02() {
		System.out.println("/reqeust/req-ex02 요청!");
	}
	
//	@RequestMapping(value = "/request/basic01", method = RequestMethod.GET)
//	@GetMapping("/request/basic01")
	@GetMapping("/basic01")
	
	public String basicGet() {
		System.out.println("/request/basic01요청이 들어옴: GET");
		return "request/req-ex01";
	}
	
//	@RequestMapping(value = "/request/basic01", method = RequestMethod.POST)
//	@PostMapping("/request/basic01")
	@PostMapping("/basic01")
	public String basicPost() {
		System.out.println("/request/basic01요청이 들어옴: POST");
		return "request/req-ex01";
	}

	// 요청 파라미터 받아보기
//	@GetMapping("/request/param")
	@GetMapping("/param")
	public String paramTest(HttpServletRequest request) {
		System.out.println("request/param 요청: GET");
		
		String name = request.getParameter("name");
		String age = request.getParameter("age");
		System.out.println("이름 : " + name);
		System.out.println("나이 : " + age);
		
		return "";
	}
	
	
	/////////////////////////////////////////////////////////////////////
	@GetMapping("/join")
	public void register() {
		System.out.println("/request/join : GET");
	}
	
}




#./views/request/join.jsp

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
    
    
<%@ taglib prefix = "c" uri = "http://java.sun.com/jsp/jstl/core" %>
    
<%--
	#컨텍스트 루트 경로가 변경될 경우 처리방법
	1.컨텍스트 루트 경로를 변수로 지정함
	2.<c:url> 태그를 사용
 --%>
 
 <c:set var = "path" value = "<%= request.getContextPath() %>" scope = "application"/>
    
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
<h2>요청 파라미터값 테스트!!</h2>
<%--
# 1번방식
<form action = "${path}/request/join" method = "post">
 --%>
 <%-- #2번방식 --%>
<form action = "<c:url value = '/request/join' />" method = "post"> 	
	<fieldset>
		<legend>회원가입 양식</legend>
		<p>
			- ID : <input type = "text" name = "userId" size = "10"> <br>
			- PW : <input type = "password" name = "userPw" size = "10"> <br>
			- NAME : <input type = "text" name = "userName" size = "10"> <br>
			- HOBY :
			<input type = "checkbox" name = "hobby" value = "soccer" > 축구&nbsp;
			<input type = "checkbox" name = "hobby" value = "book" > 독서&nbsp;
			<input type = "checkbox" name = "hobby" value = "music" > 음악&nbsp;
			<br>
			<input type = "submit" value = "회원가입" />
		</p>
	</fieldset>
</form>

</body>
</html>




#./WEB-INF/web.xml


<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee https://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">

	<!-- mvc와 관련된 스프링 설정파일의 위치를 지정하는 태그 -->
	<!-- The definition of the Root Spring Container shared by all Servlets and Filters -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/spring/mvc-config.xml</param-value>
	</context-param>
	
	<!-- Creates the Spring Container shared by all Servlets and Filters -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<!--  디스패쳐 서블릿 등록 설정 -->
	<!-- Processes application requests -->
	<servlet>
		<servlet-name>appServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>/WEB-INF/spring/servlet-config.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
		
	<servlet-mapping>
		<servlet-name>appServlet</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>


	<!-- 한글 인코딩 필터 설정(톰캣 내부의 한글처리) -->
	<filter>
	    <filter-name>encodingFilter</filter-name>
	    <filter-class>
				org.springframework.web.filter.CharacterEncodingFilter
			</filter-class>
	    <init-param>
	      <param-name>encoding</param-name>
	      <param-value>UTF-8</param-value>
	    </init-param>
	    <init-param>
	      <param-name>forceEncoding</param-name>
	      <param-value>true</param-value>
	    </init-param>
    </filter>
    <!-- 위에 지정한  encodingFilter이름을 모든 패턴에 적용-->
    <filter-mapping>
	    <filter-name>encodingFilter</filter-name>
	    <url-pattern>/*</url-pattern>
    </filter-mapping>

</web-app>


















##############################################################################
23)post 혹은 get으로 오는 파라미터를 Controller에서 처리하기

<가 문제>

1.전통적인 jsp/servlet의 파라미터 읽기처리방법

2.아노테이션을 이용한 요청 파라미터 처리

3.커맨드 객체를 활용한 파라미터 처리(UserVO)
	pacakge com.spring.web.model 생성


*join을 이용해서 파라미터 처리 3가지방식으로 풀어라(join.jsp는 수정할필요없거 RequestController에서
		join.jsp가 보내주는 파라미터를 처리만 하면 된다)
	-ID, PW, HOBBY 값을 입력받았을때 그걸 출력해라
		-2번방법(아노테이션)을 이용한경우 HOBBY가 없을시에  
			에러가 난다. 두개의 에러원인이 있는데 f3을 써가면서 고쳐라
		-HOBBY가 없을시에는 "no hobby person"이 출력되게 하라
		-HOBBY를 담을때는 List<String>을 이용하라

<출력방식코드>
		System.out.println("ID : " + id);
		System.out.println("PW : " + pw);
		System.out.println("HOBBY : " + hobbys.toString());








<나 문제>


class이용 : RequestController.java

# 문제
	1. RequestController에 현재 파일을 열어주는 메서드 생성
	 - url: /request/quiz : GET
	 - views: /request/req-quiz.jsp
		-이놈은 아래 코드참고
	 - method-name: quiz()
	2. RequestController에 전송된 아이디, 비밀번호 파라미터를
	  받아 로그인을 처리하는 메서드 생성
	 - url: /request/quiz : POST
	 - views: 
	 	성공시: /request/login-success.jsp
			-그냥 성공입니다만 띄워라
	 	실패시: /request/login-fail.jsp
			-그냥 실패입니다만 띄워라
	 - method-name: quiz()
	3. 로그인 성공조건: 
	 - id값이 : abc1234 , pw: xxx4321
	 
	 -리퀘스트 파람이나 커맨드객체를 사용해라


위 #문제를 3가지 방법으로 풀어라

1.전통적인 jsp/servlet의 파라미터 읽기처리방법

2.아노테이션을 이용한 요청 파라미터 처리

3.커맨드 객체를 활용한 파라미터 처리(UserVO)
	pacakge com.spring.web.model 생성


#req-quiz.jsp



<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<%--
	# 문제
	1. RequestController에 현재 파일을 열어주는 메서드 생성
	 - url: /request/quiz : GET
	 - views: /request/req-quiz.jsp
	 - method-name: quiz()
	2. RequestController에 전송된 아이디, 비밀번호 파라미터를
	  받아 로그인을 처리하는 메서드 생성
	 - url: /request/quiz : POST
	 - views: 
	 	성공시: /request/login-success.jsp
	 	실패시: /request/login-fail.jsp
	 - method-name: quiz()
	3. 로그인 성공조건: 
	 - id값이 : abc1234 , pw: xxx4321
	 
	 -리퀘스트 파람이나 커맨드객체를 사용해라
 --%>

<h3>파라미터값 처리하기 문제~</h3>

<form action="<c:url value='/request/quiz'/>" method="post">
	<p>
		# ID: <input type="text" name="userId" size="10"><br>
		# PW: <input type="password" name="userPw" size="10"><br>
		<input type="submit" value="로그인">
	</p>
</form>

</body>
</html>


package com.spring.web.controller;

import javax.servlet.http.HttpServletRequest;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.spring.web.model.UserVO;
import com.spring.web.model.UserVO2;

@Controller
@RequestMapping("/request")
public class RequestController {
	
	@RequestMapping("/test/request/test")
	public String test() {
		System.out.println("/test/request/test를 요청함");
		return "test";
	}
	
	@RequestMapping("/req")
	public String req() {
		System.out.println("/request/req 요청됨");
		return "request/req-ex01";
	}

//	@RequestMapping(value = "/request/basic01", method = RequestMethod.GET)
	@GetMapping("/basic01")
	public String basicGet() {
		System.out.println("/reqeust/basic01 요청됨 : GET방식");
		return "request/req-ex01";
	}
	
//	@RequestMapping(value = "/request/basic01", method = RequestMethod.POST)
	@PostMapping("/basic01")
	public String basicPost() {
		System.out.println("/reqeust/basic01 요청됨 : POST방식");
		return "request/req-ex01";
	}
	
	
	@RequestMapping(value = "/param", method = RequestMethod.GET)
	public String ex(HttpServletRequest request) {
		String name = request.getParameter("name");
		String age = request.getParameter("age");
		System.out.println("/request/param 요청");
		System.out.println("name : " + name);
		System.out.println("age : " + age);
		return "";
	}
	
	@RequestMapping(value = "/req-ex02", method = RequestMethod.GET)
	public void req1() {
		System.out.println("/request/req-ex01 요청됨 : GET");
	}
	
	@RequestMapping(value = "/join", method = RequestMethod.GET)
	public void register() {
		System.out.println("/request/join 호출됨 : GET");
	}
	
	/*
	@RequestMapping(value = "/join", method = RequestMethod.POST)
	public void register(HttpServletRequest request) {
		String id = request.getParameter("userId");
		String pw = request.getParameter("userPw");
		String[] hobby = request.getParameterValues("hobby");
		
		System.out.println("ID : " + id);
		System.out.println("PW : " + pw);
		System.out.println("HOBBY : " + Arrays.toString(hobby));
	}
	*/
	
//	@RequestMapping(value = "/join", method = RequestMethod.POST) 
//	public void register(@RequestParam("userId") String id,
//							@RequestParam("userPw") String pw,
//							@RequestParam(value = "hobby", required = false, defaultValue = "no hobby person") List<String> hobby) {
//		System.out.println("ID : " + id);
//		System.out.println("PW : " + pw);
//		System.out.println("HOBBY : " + hobby.toString());
// 
//	}
	
	@RequestMapping(value = "/join", method = RequestMethod.POST)
	public void register(UserVO user) {
		System.out.println("Name : " + user.getUserName());
		System.out.println("ID : " + user.getUserId());
		System.out.println("PW : " + user.getUserPw());
		if (user.getHobby() == null) {
			System.out.println("HOBBY : no hobby person");			
		} else {
			System.out.println("HOBBY : " + user.getHobby().toString());			
		}
	}
	
	
	@RequestMapping(value = "/quiz", method = RequestMethod.GET)
	public String quiz() {
		System.out.println("/request/quiz 요청됨 : GET");
		return "request/req-quiz";
	}
	
//	@RequestMapping(value = "/quiz", method = RequestMethod.POST)
//	public String quiz(HttpServletRequest request) {
//		String id = request.getParameter("userId");
//		String pw = request.getParameter("userPw");
//		
//		if (id.equals("abc1234") && pw.equals("xxx4321")) {			
//			return "request/login-success";
//		}
//		
//		return "request/login-fail";
//	}
	
//	@RequestMapping(value = "/quiz", method = RequestMethod.POST)
//	public String quiz(@RequestParam("userId") String id,
//						@RequestParam("userPw") String pw) {
//		if (id.equals("abc1234") && pw.equals("xxx4321")) {
//			return "request/login-success";			
//		}
//		return "request/login-fail";
//	}
	
	@RequestMapping(value = "/quiz", method = RequestMethod.POST)
	public String quiz(UserVO2 user) {
		
		if (user.getUserId().equals("abc1234")
				&& user.getUserPw().equals("xxx4321")) {
			return "request/login-success";			
		}
		return "request/login-fail";
	}
}


##############################################################################




답: 


#RequestController.java만 만지고 나머지는 그냥 만들면됨

package com.spring.web.controller;

import javax.servlet.http.HttpServletRequest;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;

import com.spring.web.model.UserVO;
import com.spring.web.model.UserVO2;

//클라이언트 측에서 요청을 보냈을때 그것을 처리하는 컨트롤러
//디스패쳐서블릿이라는 프론트 컨트롤러가 RequestController를 찾게하려면
//디스패쳐서블릿과 requestController의 의존관계를 설정을 해야한다.
//의존관계설정을 우리가 따로할 필요는 없고 해당 클래스에 대한 빈객체를 실행시 만들어지게만 하면된다.
//근데 helloController는 빈등록 코드를 자동으로 이루어지게 했으니 다른 컨트롤러들도 
//자동 빈등록 코드와 아노테이션을 이용하여 그러헥 만들면 된다.

@Controller	
@RequestMapping("/request") // 공통 uri 떼놓기
public class RequestController {

	//RequestMapping은 어떤 URI로 이 메서드를 동작시킬 것인가에 대한 설정임
	//이거 value = "", GET 이런 설정안하면 post든 get이든 모두 받겠다는 의미임
//	@RequestMapping("/request/test")
	@RequestMapping("/test") // 원래 위에처럼 해야하지만 클래스선언분위에 일괄매핑을 했어서 괜찮다.
	public String testCall() {
		System.out.println("/request/test 요청이 들어옴!");
		return "test";
	}
	
//	@RequestMapping("/request/req") // 이대로 두면 /request/request/req 해야지 온다.
	@RequestMapping("/req")
	public String req() {
		System.out.println("/request/req 요청이 들어옴~!");
		return "request/req-ex01";
	}
	
	@GetMapping("/req-ex02")
	public void reqEx02() {
		System.out.println("/reqeust/req-ex02 요청!");
	}
	
//	@RequestMapping(value = "/request/basic01", method = RequestMethod.GET)
//	@GetMapping("/request/basic01")
	@GetMapping("/basic01")
	
	public String basicGet() {
		System.out.println("/request/basic01요청이 들어옴: GET");
		return "request/req-ex01";
	}
	
//	@RequestMapping(value = "/request/basic01", method = RequestMethod.POST)
//	@PostMapping("/request/basic01")
	@PostMapping("/basic01")
	public String basicPost() {
		System.out.println("/request/basic01요청이 들어옴: POST");
		return "request/req-ex01";
	}
	
	// 요청 파라미터 받아보기
//	@GetMapping("/request/param")
	@GetMapping("/param")
	public String paramTest(HttpServletRequest request) {
		System.out.println("request/param 요청: GET");
		
		String name = request.getParameter("name");
		String age = request.getParameter("age");
		System.out.println("이름 : " + name);
		System.out.println("나이 : " + age);
		
		return "";
	}
	
	
	/////////////////////////////////////////////////////////////////////
	@GetMapping("/join")
	public void register() {
		System.out.println("/request/join : GET");
	}
	
	/*
	 # 1.전통적인 jsp/servlet의 파라미터 읽기처리방법
	 	-HttpServletRequest객체를 사용
	 
	
	@PostMapping("/join")
	public String register(HttpServletRequest request) {
		System.out.println("/request/join : POST");
		System.out.println("ID : " + request.getParameter("userId"));
		System.out.println("PW : " + request.getParameter("userPw"));
		System.out.println("HOBBY : " 
				+ Arrays.toString(request.getParameterValues("hobby")));
		return "request/join";
	}
	*/
	
	/* 
	 # 2.@RequestParam 아노테이션을 이용한 요청 파라미터 처리
	 	-1번 안쓰는 이유 : 받아야할 파라미터가 많다면 request함수를 넘많이써야함. 나이가 들어오면
	 		변환처리를 해야한다. request의 리턴타입은 항상 String이기때문에 변환과정이 추가돼서 별로다.
	 		즉 형변환 처리의 귀찮음을 막아주는 법
	 	-2번단점 : 현재경우 hobby취미를 선택하지 않으면 에러난다. 즉 매개변수로 hobby값이 null이 오면 에러다
	 		@RequestParam(value = "hobby", required = false) List<String> hobbys) {
	 		위처럼하면 해결됨 f3보면 required가 true로 되어있어서에러인거다
	 		근데 이렇게해도 null이 들어오니까 문법에러가 나긴함 왜냐면 아래 .toString()을 했기때문
	 		그럼 @RequestParam(value = "hobby", required = false, defaultValue = "no hobby person") List<String> hobbys) {
	 		하면 됨
	 		
	 	**별개로 한글로 입력하면 깨진다. 톰캣이 한글을 못알아먹어서 그렇다.
	 		톰캣한글처리에 대해 편하게 할수있는 방법을 spring에서 제공한다.
	 		
	 
	@PostMapping("/join")
	public void register(@RequestParam("userId") String id,
							@RequestParam("userPw") String pw,
							@RequestParam(value = "hobby", required = false, defaultValue = "no hobby person") List<String> hobbys) {
			//String id = request.getParameter("userId"); 를 한번에 처리해주는 것임
			//int라면 형변환도 int로 해서 알아서 됨
			
		System.out.println("ID : " + id);
		System.out.println("PW : " + pw);
		System.out.println("HOBBY : " + hobbys.toString());
	}
	
	*/
	
	/*
	 # 3.커맨드 객체를 활용한 파라미터 처리
	 	-UserVO의 필드명과 jsp의 파라미터명이 같고 UserVo라는 객체에 setter getter가 있다면 그대로 바로 형변환
	 	될건 되면서 알아서 다 들어간다. 자동화의 신세계!
	 */
	@PostMapping("/join")
	public void register(UserVO user) {
		System.out.println("ID : " + user.getUserId());
		System.out.println("PW : " + user.getUserPw());
		System.out.println("NAME : " + user.getUserName());
		System.out.println("HOBBY : " + user.getHobby());
	}
	
	@GetMapping("/quiz")
	public String quiz() {
		System.out.println("/request/req-quiz 요청됨 : GET");
		return "/request/req-quiz"; // / 붙여도 되고 안붙여도 됨
	}
	
	@PostMapping("/quiz")
	public String quiz(UserVO2 user) {
		System.out.println("/request/req-quiz 요청됨 : POST");
		
		if (user.getUserId().equals("abc1234") 
				&& user.getUserPw().equals("xxx4321")) {
			return "request/login-success";	
		}
		
		return "request/login-fail";
	}
	
}










##############################################################################
24)bean id 설정, model사용

<package생성> : package com.spring.web.controller;
<class 생성> : ResponseController.java
<views>
폴더생성 : response
jsp생성 : res-ex01.jsp, test.jsp, test2.jsp

1)아노테이션을 통한 자동빈등록시 bean id 따로 지정하는법
	-따로지정한뒤 beans graph를 이용하여 bean id가 바꼈나 봐라
		-원래 자동생성시 beanid는 기본값으로 해당 클래스이름에서 첫글자를 소문자로 한 것이다.
	-bean id는 responseController에서 resCon으로 바꿔라



답: @Controller("resCon")



2)동적으로 jsp에 값을 넘겨주기위해 model 사용하기

1.아노테이션과 Model 객체를 사용하여 매개변수받기
2.1번의 것을 특정 아노테이션을 이용하여 매개변수에서 한번에 처리하기

	1,2번문제는 test.jsp로 해결(아래 테스트1페이지와 관련)
3.model 관련 class 타입을 반환하여 얻기
	-3번문제는 test2.jsp로 해결
	-특정 객체를 반환하여 viewResolver에게 문자열을 전달하면서 동시에
		데이터 세트도 전달하기
	-데이터세트 : "userName", "박영희"
	-viewResolver에게 전달할 문자열 : "/response/test2"


#res-ex01.jsp

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix = "c" uri = "http://java.sun.com/jsp/jstl/core" %>    

<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<h2>Model 객체에 대해 알아보기</h2>

<a href = ""> 테스트 1페이지로~</a>
	<%-- 여기서 get으로 보내는건데(아래도 get인건 마찬가지) 나이에 대해서를 링크에 ?붙여서(30으로)
		보내고 별명은 nick, 뽀삐로 Controller에서 model에 담은뒤 보내라 
		즉 나이는 jsp에서 파라미터로 보내고 별명은 controller에서 model에 담아서 보낸걸
		받아서 사용해라
--%>
<a href = ""> 테스트 2페이지로~</a>

</body>
</html>

#test.jsp

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
<h2>test.jsp 페이지입니다.</h2>

<p> 지정된 별명은 ??입니다. 그리고 나이는 ??세 입니다.</p>

</body>
</html>


#test2.jsp



<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<h2>test2.jsp 페이지입니다.</h2>
<p>
	컨트롤러가 전달한 데이터 : ??
</p>

</body>
</html>




package com.spring.web.controller;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;

@Controller("resCon")
@RequestMapping("/response")
public class ResponseController {
	@RequestMapping(value = "/res-ex01", method = RequestMethod.GET)
	public void res() {
		System.out.println("/response/res-ex01 요청됨 : GET");
	}
	
	/*
	@RequestMapping(value = "/test", method = RequestMethod.GET)
	public void test(@RequestParam("age") int age, Model model) {
		System.out.println("/response/test 요청됨 : GET");
		model.addAttribute("age", age);
		model.addAttribute("nick", "뽀삐");
	}
	*/
	@RequestMapping(value = "/test", method = RequestMethod.GET)
	public void test(@ModelAttribute("age") int age,
						Model model) {
		System.out.println("/response/test 요청됨 : GET");
		model.addAttribute("nick", "뽀삐");
	}
	
	
	@RequestMapping(value = "/test2", method = RequestMethod.GET)
	public ModelAndView test2() {
		System.out.println("/response/test2 요청됨 : GET");
//		ModelAndView mv = new ModelAndView();
//		mv.addObject("userName", "박영희");
//		mv.setViewName("/response/test2");
//		
//		return mv;
		
		return new ModelAndView("response/test2", "userName", "박영하");
	}
	
	
}

##############################################################################




답: 


#ResponseController.java

package com.spring.web.controller;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

@Controller("resCon")
@RequestMapping("/response")

public class ResponseController {
	
	public ResponseController() {
		// TODO Auto-generated constructor stub
	}
	
	@GetMapping("/res-ex01")
	public void resEx01() {
		
	}
	
	//1.Model 객체를 사용하여 화면에 데이터 전송하기
	/*
	@GetMapping("/test")
	public void test(@RequestParam("age") int age,
						Model model) {
		model.addAttribute("nick", "뽀삐");
		model.addAttribute("age", age);
	}
	*/
	
	//@ModelAttribute : @RequestParam("age") int age + model.addAttribute("age", age)
					//와 같은 것이다. 포함관계
	//2.@ModelAttribute를 사용한 화면에 데이터 전송처리
	@GetMapping("/test")
	public void test(@ModelAttribute("age") int age,
			Model model) {
		model.addAttribute("nick", "뽀삐");
//		model.addAttribute("age", age);
	}
	
	//3.ModelAndView 객체를 활용한 처리
	@GetMapping("/test2")
	public ModelAndView test2() {
//		ModelAndView mv = new ModelAndView();
//		mv.addObject("userName", "박영희"); //화면에 전달할 데이터 래핑
//		mv.setViewName("/response/test2"); //viewResolver에게 전달할 문자열
//		return mv;
		
		return new ModelAndView("/response/test2", "userName", "박영희");
	}
}



#res-ex01.jsp

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix = "c" uri = "http://java.sun.com/jsp/jstl/core" %>    

<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<h2>Model 객체에 대해 알아보기</h2>

<%--
	<c:url value='' />
		-value 속성안에 컨텍스트 루트 경로를 제외한 절대경로를 작성
		-그러면 컨텍스트 루트를 제외하고 연결가능
		<a href = "/web/response/test">테스트페이지로~</a>
		위에 놈을 아래로 전환
		<a href = "<c:url value = '/response/test' />"> 테스트페이지로~</a>
		
		
 --%>

<a href = "<c:url value = '/response/test?age=30' />"> 테스트 1페이지로~</a>
<a href = "<c:url value = '/response/test2' />"> 테스트 2페이지로~</a>

</body>
</html>



#test.jsp


<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
<h2>test.jsp 페이지입니다.</h2>
<%--
	<p> 지정된 별명은 ??입니다. 그리고 나이는 ??세 입니다.</p>
 --%>
<p> 지정된 별명은 ${nick}입니다. 그리고 나이는 ${age}세 입니다.</p>
</body>
</html>



#test2.jsp

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<h2>test2.jsp 페이지입니다.</h2>
<p>
	컨트롤러가 전달한 데이터 : ${userName}
</p>

</body>
</html>






