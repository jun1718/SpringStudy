21.02.17.11회차
===============================================================================
*복습
===============================================================================







##############################################################################
44)환경설정, 벡엔드구조설계

1)환경설정
SpringWebMvcProject

com.spring.mvc(gid + artifact id)

<제일처음 project에 관한것>
	-자바버전 1.8
	-springframe 5.1.5
	-servlet에 3.1.0, javax.

<test>
	-junit의 4.12로 업그레이드
		7보다 12가 크니까 업그레이드임

<mavencompiler>
	-3.5.1
	-1.8, 1.8

<AspectJ 위에 jdbc, mybatis, mybatis와 spring 연동해주는라이브러리, Mysql connector, hikariCP 5개 다가져와라>

pom.xml 저장 후 메이븐등록

톰켓설정파일 열어서 포트를 실제배포를 위해 80번으로 변경(도메인주소 뒤에 8080안나오게하려면 기본주소인 80으로해야함)
	-저장 후 적용아이콘클릭

<톰켓server.xml>
컨텍스트루트없애기
<Context docBase="SpringWebMvcProject" path="/mvc" reloadable="true" source="org.eclipse.jst.jee.server:SpringWebMvcProject"/></Host>
/mvc를 /로 변경

저장후 적용하기누르면 No!!! 눌러야 적용이됨 yes 아님

그후서버키고 http://localhost 만 입력해도되는가봐라


<web.xml> : 한글깨지는거 막아라

servlet-context.xml을 app폴더에서 빼고 app폴더삭제해라

root-context -> mvc-config.xml
servlet-context.xml -> servlet-config.xml

*이제 이름 바꿨으니 변화된거 설정해야함
servlet-context, root-context관련된건 web.xml에서 해야함
	-23번라인쯤에 appServlet 경로 지우고<param-value>
		<param-value>/WEB-INF/spring/appServlet/servlet-context.xml</param-value>
			<param-value>/WEB-INF/spring/servlet-config.xml</param-value>

		<param-value>/WEB-INF/spring/root-context.xml</param-value>
			<param-value>/WEB-INF/spring/mvc-config.xml</param-value>


2)벡엔드 구조 설계
<resource/sql폴더만들고>
	-mvc_board.sql 만들기
	-아래 코드를 여기에 넣고 복사붙여넣기해서 워크벤치에서 실행

CREATE TABLE mvc_board (
	board_no INT PRIMARY KEY AUTO_INCREMENT,
    title VARCHAR(255) NOT NULL,
    content TEXT NULL,
    writer VARCHAR(50) NOT NULL,
    reg_date TIMESTAMP DEFAULT NOW(),
    view_cnt INT DEFAULT 0
);


com.spring.mvc.board.model
	-BoardVO
com.spring.mvc.board.repository
	-IBoardMapper

#IBoardMapper.java
package com.spring.mvc.board.repository;

import java.util.List;

import com.spring.mvc.board.model.BoardVO;

//게시판 관련 CRUD 추상 메서드 선언
public interface IBoardMapper {
	// 게시글 등록 기능
	void insert(BoardVO article);
	
	// 게시글 목록 조회
	List<BoardVO> getArticleList();
	
	// 게시글 상세 조회기능
	BoardVO getArticle(Integer boardNo);
	
	// 게시글 수정 기능
	void update(BoardVO article);
	
	// 게시글 삭제 기능
	void delete(Integer boardNo);
	
}



-mvc-config.xml에 빈객체 등록
	-메퍼 인터페이스 스캔설정까지

-mappers 폴더 안에 board 폴더 안에 BoardMapper 생성
	-BoardMapper에서 최소한의 서버동작을 확인하기위한 소스작성까지만 해라

-서버동작 -> 헬로나오는지 확인


##############################################################################


답: 그냥 하면됨 다나와있고 복붙도해줬음 정모르겠으면 이전 프로젝트 확인ㄱㄱ



















##############################################################################
45)db연동테스트(커넥션,단위테스트1)


3)db연동테스트
3-1)커넥션 테스트
com.spring.mvc.board.test
	-DbConnectTest
		-아래코드 복붙
		-우클릭 -> run as->junit ~~ 하면 초록색나오고 출력잘나오면 잘된거

	private static final String DRIVER
	= "com.mysql.cj.jdbc.Driver";
	private static final String URL 
	= "jdbc:mysql://localhost:3306/spring?serverTimezone=Asia/Seoul";
	private static final String UID = "root";
	private static final String UPW = "mysql";

	//커넥션 테스트
	@Test
	public void connectTest() {

		Connection conn = null;

		try {
			Class.forName(DRIVER);

			conn = DriverManager.getConnection(URL, UID, UPW);
			System.out.println("DB 커넥션 성공!");
			System.out.println("conn: " + conn);

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				conn.close();
			} catch (Exception e2) {
				e2.printStackTrace();
			}
		}

	}

3-2)게시글 등록 단위 테스트(junit을 사용한 단위 테스트)
	-먼저 BoardMapper.xml에 insert메소드에 관한거 작성하라
	-그다음 BoardMapper가 잘 연동되는지확인하기 위해서 BoardMapperTest 생성
		-package com.spring.mvc.board.test
	-근데 위에서 다른것들 테스트할때는 자동으로 객체 만들어서 하는데 이건 그객체안에 자동주입해야할 객체가 또있다.
		딴건 자동주입이 없어서 상관없었지만 이놈은 자동주입을 해야해서 
		@RunWith(springJUnit4ClassRunner.class)
		를 추가해야하는데 이걸 사용하려면 또다른 라이브러리를 설치해야한다.(pom.xml에서 설치해야함)
		<!--  Spring Test 모듈 -->
		<dependency>
		    <groupId>org.springframework</groupId>
		    <artifactId>spring-test</artifactId>
		    <version>${org.springframework-version}</version>
		</dependency>
	-@ContextConfiguration(locations = {"file:src/main/webapp/WEB-INF/spring/mvc-config.xml"})
		-원래는 시작하면서 자동으로 저 파일경로의 mvc-config.xml을 보고 자동등록을 해서 찾으러다니지만 지금은 테스트라서
			저 문서가 실행되지 않는다. 그럼으로 빈 자동등록과 스캔설정(자동주입설정)이 되어있는 곳의 위치를 알려주어야한다.
			
	-실행해보라
	-@RunWith: @Autowired 자동스캔을 사용하기 위한 아노테이션
		-spring test 모듈 필요함
	-@ContextConfiguration : @Autowired가 작동되려면 자동주입설정을 해놓은 설정파일의 소스코드가 있어야한다.
		해당 파일의 위치를 알려줘서 파일을 임의로 동작시키는 아노테이션
		-아래같은 순서로 적는게 직관적인듯? 
		@ContextConfiguration(locations = {"file:src/main/webapp/WEB-INF/spring/mvc-config.xml"})
		@RunWith(SpringJUnit4ClassRunner.class)


##############################################################################


답:

#BoardMapper.xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
    
<mapper namespace="com.spring.mvc.board.repository.IBoardMapper">
	<insert id = "insert">
		INSERT INTO mvc_board 
			(title, content, writer)
		VALUES (#{title}, #{content}, #{writer})
	</insert>
</mapper>




#src/test/java/com.spring.mvc.board.test.BoardMapperTest.java

package com.spring.mvc.board.test;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import com.spring.mvc.board.model.BoardVO;
import com.spring.mvc.board.repository.IBoardMapper;

@ContextConfiguration(locations = {"file:src/main/webapp/WEB-INF/spring/mvc-config.xml"})
@RunWith(SpringJUnit4ClassRunner.class)

public class BoardMapperTest {
	@Autowired
	private IBoardMapper mapper;
	
	//게시글 등록 단위 테스트(junit을 사용한 단위 테스트)
	@Test
	public void insertTest() {
		BoardVO article = new BoardVO();
		article.setTitle("테스트 제목입니다.");
		article.setWriter("김테스트");
		article.setContent("테스트 중이니까 말시키지 마시오!");
		mapper.insert(article);
		System.out.println("게시물 등록 성공!");
	}
	
	
}














##############################################################################
46)db연동테스트(단위테스트2)

1)위에 insertTest() 메소드내부에 코드를 for문에 넣어서 320개를 추가로 더넣어라 각 필드의 벨류값 끝에
	+ i를 해서 1~ 320 이 들어가게해서 식별가능하도록해라 마지막엔 게시물등록성공!나오게하고
	잘들어왔나 확인하라

2)게시글 목록조회 단위 테스트 해봐라
	-outline을 이용하는게 단위 테스트다 
	-람다를 이용해서도 해봐라

3)게시글 단일 조회 테스트

4)게시글 수정 테스트

5)게시글 삭제 테스트
##############################################################################


답: 나머지 전체코드는 깃허브 22.02.17의 workspace를 봐라



#BoardMapper.xml

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
    
<mapper namespace="com.spring.mvc.board.repository.IBoardMapper">

	<resultMap id = "BoardMap" type="com.spring.mvc.board.model.BoardVO" >
		<id property="boardNo" column="board_no" />
		<result property="title" column = "title" />
		<result property="content" column = "content" />
		<result property="writer" column = "writer" />
		<result property="regDate" column = "reg_date" />
		<result property="viewCnt" column = "view_cnt" />
	</resultMap>

	<insert id = "insert">
		INSERT INTO mvc_board 
			(title, content, writer)
		VALUES (#{title}, #{content}, #{writer})
	</insert>
	
	<select id = "getArticleList" resultMap = "BoardMap">
		SELECT * 
		FROM mvc_board
		ORDER BY board_no DESC
	</select> 
	
	<select id = "getArticle" resultMap = "BoardMap">
		SELECT * 
		FROM mvc_board
		WHERE board_no = #{boardNo}
	</select>
	
	<update id = "update">
		UPDATE mvc_board
		SET writer = #{writer}, title = #{title}, content = #{content}
		WHERE board_no = #{boardNo}
	</update>
	
	<delete id = "delete">
		DELETE FROM mvc_board
		WHERE board_no = #{boardNo}
	</delete>
</mapper>








#BoardMapperTest.java

package com.spring.mvc.board.test;

import java.util.List;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import com.spring.mvc.board.model.BoardVO;
import com.spring.mvc.board.repository.IBoardMapper;

@ContextConfiguration(locations = {"file:src/main/webapp/WEB-INF/spring/mvc-config.xml"})
@RunWith(SpringJUnit4ClassRunner.class)

public class BoardMapperTest {
	@Autowired
	private IBoardMapper mapper;
	
	//게시글 등록 단위 테스트(junit을 사용한 단위 테스트)
	@Test
	public void insertTest() {
		
		for (int i = 1; i <= 320; i++) {
			BoardVO article = new BoardVO();
			article.setTitle("테스트 제목입니다." + i);
			article.setWriter("김테스트" + i);
			article.setContent("테스트 중이니까 말시키지 마시오!" + i);
			mapper.insert(article);			
		}
		
		System.out.println("게시물 등록 성공!");
	}
	
	
	//게시글 목록 조회 테스트
	@Test
	public void getListTest() {
//		List<BoardVO> list = mapper.getArticleList();
//		for (BoardVO vo : list) {
//			System.out.println(vo);
//		}
		
		mapper.getArticleList().forEach(vo -> System.out.println(vo));
	}
	
	//게시글 단일 조회 테스트
	@Test
	public void getArticleTest() {
		System.out.println(mapper.getArticle(4));
	}
	


	
	//게시글 수정 테스트 :
	//vo의 세터를 사용하여 수정 내용(글제목, 글내용)을 입력하고
	//수정을 테스트해보세요.
	
	@Test
	public void updateTest() {
		BoardVO vo = new BoardVO();
		vo.setBoardNo(4);
		vo.setWriter("김테스트5");
		vo.setTitle("테스트제목입니다.5");
		vo.setContent("테스트 중이니까 말시키지 마시오!4");
		
		mapper.update(vo);
		System.out.println("변경 완료!");
//		getArticleTest();
		System.out.println("수정된 후 정보 : " + mapper.getArticle(4));
		
	}
	
	//게시글 삭제 테스트 : 게시글 번호를 통한 삭제를 확인
	@Test
	public void deleteTest() {
		mapper.delete(6);
		BoardVO vo = mapper.getArticle(6);
		if (vo == null) {
			System.out.println("# 게시물이 없습니다!");
		} else {
			System.out.println("# 게시물 정보 : " + vo);
		}
//		getListTest();
		
	}

	
}



