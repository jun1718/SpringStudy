22.03.03.20회차
===============================================================================
*
===============================================================================






##############################################################################
72) 자동로그인(쿠키_세션id저장 후 쿠키를 응답하여 클라이언트에 저장)

<!--  자동로그인 체크박스: loginmodal 50번라인쯤 집어넣어라 비밀번호 입력밑에-->
<tr>
	<td>
		<input type = "checkbox" id = "auto-login" name = "autoLogin"> 자동 로그인
	</td>
</tr>

#로그인 버튼 이벤트처리에서 autoLogin 상수만들고 박스를 체크했을때 true가 넘어오게 안했을때 false가 넘어오게해서
	콘솔확인
	-이때 해당 checkbox 객체 이벤트처리로 JQuery에 가져올때 이때까지는
		id로 했지만 이번에는 name 을 이용해서 가죠와라

#autoLogin 값도 UserController(서버)에 전달
	-전달받은 서버가 데이터처리할수있도록 autoLogin 필드를 UserVO에 넣어줘야함 settergetter도
		public String loginCheck(@RequestBody UserVO inputData,
								HttpSession session) {
		System.out.println("parameter: " + inputData); // autoLogin값 잘넘어오는지 서버에서 로그찍어서
									확인


#아이디가 정상적으로 로그인되었을경우 서버에서 처리
	-쿠키저장경로: localhost/ -> 기본 uri로 하란말 /
	-long limitTime를 90일로처리(쿠키수명)
		-쿠키 수명정할때는 int로 넣어야하는데 long으로 만든이유는 나중에나온다
	-다하고나면 정상적으로 자동로그인체크하고나서 로그인성공했을때 f12해서 coookies에서 내 pc의 쿠키에 loginCookie 생기는거
		확인하라
		-세션 id가 현재 로그인할때의 세션아이디와 같다는 것도확인하라
			-이게 브라우저 끄고 다시들어오면 세션아이디는 바뀌지만 쿠키아이디는 유지된다.
		-expired 만료기간 3개월 뒤가 맞는지 확인
		

#현재 상황은 쿠키가 클라이언트 pc에 저장되게 하는 것까지 된거고 아직 브라우저 끄고 다시 들어왔을때 바로 로그인 안된다.
	아직 db에 처리를 안해줬기때문이고 그건 다음문제에서 한다.
##############################################################################

답:


#login_modal.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
	pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>

<!-- 로그인 Modal-->
<div class="modal fade" id="log-in">
	<div class="modal-dialog">
		<div class="modal-content">

			<!-- Modal Header -->
			<div class="modal-header">
				<h4 class="modal-title">
					<span style="color: #ff52a0;">IZONE</span> 로그인
				</h4>
				<button type="button" class="close" data-dismiss="modal">&times;</button>
			</div>

			<!-- Modal body -->
			<div class="modal-body">

				<form action="#" name="izone-sign-in" method="post" id="signInForm"
					style="margin-bottom: 0;">
					<table style="cellpadding: 0; cellspacing: 0; margin: 0 auto; width: 100%">
						<tr>
							<td style="text-align: left">
								<p><strong>아이디를 입력해주세요.</strong>&nbsp;&nbsp;&nbsp;<span id="idCheck"></span></p>
							</td>
						</tr>
						<tr>
							<td><input type="text" name="userId" id="signInId"
								class="form-control tooltipstered" maxlength="10"
								required="required" aria-required="true"
								style="margin-bottom: 25px; width: 100%; height: 40px; border: 1px solid #d9d9de"
								placeholder="최대 10자"></td>
						</tr>
						<tr>
							<td style="text-align: left">
								<p><strong>비밀번호를 입력해주세요.</strong>&nbsp;&nbsp;&nbsp;<span id="pwCheck"></span></p>
							</td>
						</tr>
						<tr>
							<td><input type="password" size="17" maxlength="20" id="signInPw"
								name="userPw" class="form-control tooltipstered" 
								maxlength="20" required="required" aria-required="true"
								style="ime-mode: inactive; margin-bottom: 25px; height: 40px; border: 1px solid #d9d9de"
								placeholder="최소 8자"></td>
						</tr>
						
						<!--  자동로그인 체크박스 -->
						<tr>
							<td>
								<input type = "checkbox" id = "auto-login" name = "autoLogin"> 자동 로그인
							</td>
						</tr>
						
						<tr>
							<td style="padding-top: 10px; text-align: center">
								<p><strong>로그인하셔서 WIZONE이 되어보세요~~!</strong></p>
							</td>
						</tr>
						<tr>
							<td style="width: 100%; text-align: center; colspan: 2;"><input
								type="button" value="로그인" class="btn form-control tooltipstered" id="signIn-btn"
								style="background-color: #ff52a0; margin-top: 0; height: 40px; color: white; border: 0px solid #f78f24; opacity: 0.8">
							</td>
						</tr>
						<tr>
							<td
								style="width: 100%; text-align: center; colspan: 2; margin-top: 24px; padding-top: 12px; border-top: 1px solid #ececec">

								<a class="btn form-control tooltipstered" data-toggle="modal"
								href="#sign-up"
								style="cursor: pointer; margin-top: 0; height: 40px; color: white; background-color: orange; border: 0px solid #388E3C; opacity: 0.8">
									회원가입</a>
							</td>
						</tr>
						<tr>
							<td	style="width: 100%; text-align: center; colspan: 2; margin-top: 24px; padding-top: 12px; border-top: 1px solid #ececec">

								<a id="custom-login-btn" href="https://kauth.kakao.com/oauth/authorize?client_id=1b99bdb2b2d8b2b7b7f7c7ee8f97842b&redirect_uri=http://localhost:8181/ggbro/kakaoLogin&response_type=code">
									<img src="//mud-kage.kakao.com/14/dn/btqbjxsO6vP/KPiGpdnsubSq3a0PHEGUK1/o.jpg" width="300"/>
								</a>
							</td>
						</tr>
					</table>
				</form>
			</div>
		</div>
	</div>
</div>

<!-- 회원가입 Modal -->
<div class="modal fade" id="sign-up" role="dialog">
	<div class="modal-dialog">

		<!-- Modal content-->
		<div class="modal-content">
			<div class="modal-header">
				<h4 class="modal-title">
					<span style="color: #ff52a0;">IZONE</span> 회원 가입
				</h4>
				<button type="button" class="close" data-dismiss="modal">×</button>

			</div>

			<div class="modal-body">

				<form action="#" name="signup" id="signUpForm" method="post"
					style="margin-bottom: 0;">
					<table
						style="cellpadding: 0; cellspacing: 0; margin: 0 auto; width: 100%">
						<tr>
							<td style="text-align: left">
								<p><strong>아이디를 입력해주세요.</strong>&nbsp;&nbsp;&nbsp;<span id="idChk"></span></p>
							</td>
								
							
						</tr>
						<tr>
							<td><input type="text" name="userId" id="user_id"
								class="form-control tooltipstered" maxlength="14"
								required="required" aria-required="true"
								style="margin-bottom: 25px; width: 100%; height: 40px; border: 1px solid #d9d9de"
								placeholder="숫자와 영어로 4-10자">
							</td>
							
						</tr>

						<tr>
							<td style="text-align: left">
								<p><strong>비밀번호를 입력해주세요.</strong>&nbsp;&nbsp;&nbsp;<span id="pwChk"></span></p>
							</td>
						</tr>
						<tr>
							<td><input type="password" size="17" maxlength="20" id="password"
								name="userPw" class="form-control tooltipstered" 
								maxlength="20" required="required" aria-required="true"
								style="ime-mode: inactive; margin-bottom: 25px; height: 40px; border: 1px solid #d9d9de"
								placeholder="영문과 특수문자를 포함한 최소 8자"></td>
						</tr>
						<tr>
							<td style="text-align: left">
								<p><strong>비밀번호를 재확인해주세요.</strong>&nbsp;&nbsp;&nbsp;<span id="pwChk2"></span></p>
							</td>
						</tr>
						<tr>
							<td><input type="password" size="17" maxlength="20" id="password_check"
								name="pw_check" class="form-control tooltipstered" 
								maxlength="20" required="required" aria-required="true"
								style="ime-mode: inactive; margin-bottom: 25px; height: 40px; border: 1px solid #d9d9de"
								placeholder="비밀번호가 일치해야합니다."></td>
						</tr>

						<tr>
							<td style="text-align: left">
								<p><strong>이름을 입력해주세요.</strong>&nbsp;&nbsp;&nbsp;<span id="nameChk"></span></p>
							</td>
						</tr>
						<tr>
							<td><input type="text" name="userName" id="user_name"
								class="form-control tooltipstered" maxlength="6"
								required="required" aria-required="true"
								style="margin-bottom: 25px; width: 100%; height: 40px; border: 1px solid #d9d9de"
								placeholder="한글로 최대 6자"></td>
						</tr>
						
						<!-- 
						<tr>
							<td style="text-align: left">
								<p><strong>이메일을 입력해주세요.</strong>&nbsp;&nbsp;&nbsp;<span id="emailChk"></span></p>
							</td>
						</tr>
						<tr>
							<td><input type="email" name="userEmail" id="user_email"
								class="form-control tooltipstered" 
								required="required" aria-required="true"
								style="margin-bottom: 25px; width: 100%; height: 40px; border: 1px solid #d9d9de"
								placeholder="ex) izone@produce.com"></td>
						</tr>
						 -->

						<tr>
							<td style="padding-top: 10px; text-align: center">
								<p><strong>회원가입하셔서 WIZONE이 되어보세요~~!</strong></p>
							</td>
						</tr>
						<tr>
							<td style="width: 100%; text-align: center; colspan: 2;">
								<input
									type="button" value="회원가입" 
									class="btn form-control tooltipstered" id="signup-btn"
									style="background-color: #ff52a0; margin-top: 0; height: 40px; color: white; border: 0px solid #388E3C; opacity: 0.8"
								>
							</td>
						</tr>

					</table>
				</form>
			</div>
		</div>
	</div>
</div>



<script>
//start JQuery
$(function() {
	
	const getIdCheck= RegExp(/^[a-zA-Z0-9]{4,14}$/);
	const getPwCheck= RegExp(/([a-zA-Z0-9].*[!,@,#,$,%,^,&,*,?,_,~])|([!,@,#,$,%,^,&,*,?,_,~].*[a-zA-Z0-9])/);
	const getName= RegExp(/^[가-힣]+$/);
	const getMail = RegExp(/^[A-Za-z0-9_\.\-]+@[A-Za-z0-9\-]+\.[A-Za-z0-9\-]+/);
	let chk1 = false, chk2 = false, chk3 = false, chk4 = false;
	
	//회원가입 검증~~
	//ID 입력값 검증.
	$('#user_id').on('keyup', function() {
		if($("#user_id").val() === ""){
			$('#user_id').css("background-color", "pink");
			$('#idChk').html('<b style="font-size:14px;color:red;">[아이디는 필수 정보에요!]</b>');
			chk1 = false;
		}
		
		//아이디 유효성검사
		else if(!getIdCheck.test($("#user_id").val())){
			$('#user_id').css("background-color", "pink");
			$('#idChk').html('<b style="font-size:14px;color:red;">[영문자,숫자 4-14자]</b>');	  
			chk1 = false;
		} 
		//ID 중복확인 비동기 처리
		else {
			//ID 중복확인 비동기 통신
			const id = $(this).val();
			console.log(id);
			
			$.ajax({
				type: "POST",
				url: "/user/checkId",	
				headers: {
	                "Content-Type": "application/json"
	            },
				dataType: "text",
				data: id,
				success: function(result) {
					if(result === "OK") {
						$("#user_id").css("background-color", "aqua");
						$("#idChk").html("<b style='font-size:14px; color:green;'>[아이디는 사용 가능!]</b>");						
						chk1 = true;
					} else {
						$("#user_id").css("background-color", "pink");
						$("#idChk").html("<b style='font-size:14px; color:red;'>[아이디가 중복됨!]</b>");						
						chk1 = false;
					}
				},
				error: function() {
					console.log("통신 실패!");
				}
			});
		}
	});
	
	//패스워드 입력값 검증.
	$('#password').on('keyup', function() {
		//비밀번호 공백 확인
		if($("#password").val() === ""){
		    $('#password').css("background-color", "pink");
			$('#pwChk').html('<b style="font-size:14px;color:red;">[패스워드는 필수정보!]</b>');
			chk2 = false;
		}		         
		//비밀번호 유효성검사
		else if(!getPwCheck.test($("#password").val()) || $("#password").val().length < 8){
		    $('#password').css("background-color", "pink");
			$('#pwChk').html('<b style="font-size:14px;color:red;">[특수문자 포함 8자이상]</b>');
			chk2 = false;
		} else {
			$('#password').css("background-color", "aqua");
			$('#pwChk').html('<b style="font-size:14px;color:green;">[참 잘했어요]</b>');
			chk2 = true;
		}
		
	});
	
	//패스워드 확인란 입력값 검증.
	$('#password_check').on('keyup', function() {
		//비밀번호 확인란 공백 확인
		if($("#password_check").val() === ""){
		    $('#password_check').css("background-color", "pink");
			$('#pwChk2').html('<b style="font-size:14px;color:red;">[패스워드확인은 필수정보!]</b>');
			chk3 = false;
		}		         
		//비밀번호 확인란 유효성검사
		else if($("#password").val() != $("#password_check").val()){
		    $('#password_check').css("background-color", "pink");
			$('#pwChk2').html('<b style="font-size:14px;color:red;">[위에랑 똑같이!!]</b>');
			chk3 = false;
		} else {
			$('#password_check').css("background-color", "aqua");
			$('#pwChk2').html('<b style="font-size:14px;color:green;">[참 잘했어요]</b>');
			chk3 = true;
		}
		
	});
	
	//이름 입력값 검증.
	$('#user_name').on('keyup', function() {
		//이름값 공백 확인
		if($("#user_name").val() === ""){
		    $('#user_name').css("background-color", "pink");
			$('#nameChk').html('<b style="font-size:14px;color:red;">[이름은 필수정보!]</b>');
			chk4 = false;
		}		         
		//이름값 유효성검사
		else if(!getName.test($("#user_name").val())){
		    $('#user_name').css("background-color", "pink");
			$('#nameChk').html('<b style="font-size:14px;color:red;">[이름은 한글로 ~]</b>');
			chk4 = false;
		} else {
			$('#user_name').css("background-color", "aqua");
			$('#nameChk').html('<b style="font-size:14px;color:green;">[참 잘했어요]</b>');
			chk4 = true;
		}
		
	});
	
	
	
	$('#signup-btn').click(function(e) {
		if(chk1 && chk2 && chk3 && chk4) {
			//아이디 정보
			const id = $("#user_id").val();
			console.log("id: " + id);
			//패스워드 정보
			const pw = $("#password").val();
			console.log("pw: " + pw);
			//이름 정보
			const name = $("#user_name").val();
			console.log("name: " + name);
			
			const user = {
				account: id,
				password: pw,
				name: name
			};
			
			//클라이언트에서 서버와 통신하는 ajax함수(비동기 통신) 
			$.ajax(
				{
				type: "POST", //서버에 전송하는 HTTP요청 방식
				url: "/user/", //서버 요청 URI
				headers: {
					"Content-Type": "application/json"
				}, //요청 헤더 정보
				dataType: "text", //응답받을 데이터의 형태
				data: JSON.stringify(user), //서버로 전송할 데이터
				success: function(result) { //함수의 매개변수는 통신성공시의 데이터가 저장될 곳.
					console.log("통신 성공!: " + result);
					if(result === "joinSuccess") {
						alert("회원가입에 성공했습니다!");
						location.href="/";
					} else {
						alert("회원가입에 실패했습니다!");
					}
				}, //통신 성공시 처리할 내용들을 함수 내부에 작성.
				error: function() {
					console.log("통신 실패!");
				} //통신 실패 시 처리할 내용들을 함수 내부에 작성.
			});
		
		} else {
			alert('입력정보를 다시 확인하세요.');			
		}
	});
	
	///////////////////////////////////////////////////////////////////////////////////////////
	
	//로그인 검증~~
	//ID 입력값 검증.
	$('#signInId').on('keyup', function() {
		if($("#signInId").val() == ""){
			$('#signInId').css("background-color", "pink");
			$('#idCheck').html('<b style="font-size:14px;color:red;">[아이디는 필수!]</b>');
			chk1 = false;
		}		
		
		//아이디 유효성검사
		else if(!getIdCheck.test($("#signInId").val())){
			$('#signInId').css("background-color", "pink");
			$('#idCheck').html('<b style="font-size:14px;color:red;">[영문자,숫자 4-14자~]</b>');	  
			chk1 = false;
		} else {
			$('#signInId').css("background-color", "aqua");
			$('#idCheck').html('<b style="font-size:14px;color:green;">[참 잘했어요]</b>');
			chk1 = true;
		}
	});
	
	//패스워드 입력값 검증.
	$('#signInPw').on('keyup', function() {
		//비밀번호 공백 확인
		if($("#signInPw").val() === ""){
		    $('#signInPw').css("background-color", "pink");
			$('#pwCheck').html('<b style="font-size:14px;color:red;">[패스워드는 필수!]</b>');
			chk2 = false;
		}		         
		//비밀번호 유효성검사
		else if(!getPwCheck.test($("#signInPw").val()) || $("#signInPw").val().length < 8){
		    $('#signInPw').css("background-color", "pink");
			$('#pwCheck').html('<b style="font-size:14px;color:red;">[특수문자 포함 8자이상]</b>');
			chk2 = false;
		} else {
			$('#signInPw').css("background-color", "aqua");
			$('#pwCheck').html('<b style="font-size:14px;color:green;">[참 잘했어요]</b>');
			chk2 = true;
		}
		
	});
	
	// 로그인 버튼 클릭이벤트
	$("#signIn-btn").click(function() {
		if (chk1 && chk2) {
			const id = $("#signInId").val();
			const pw = $("#signInPw").val();
			const autoLogin = $("input[name = autoLogin]").is(":checked"); 
			// 아이디가 아니라 태그 이름으로 지목하기, input 태그의 name 속성이 autoLogin인놈 선택해라
			// is() 함수는 상태여부를 판단하여 논리값을 리턴합니다.
				// checked 됐으면 트루 안됐으면 false가 들어오게한다.
			
			console.log("id : " + id);
			console.log("pw : " + pw);
			console.log("auto : " + autoLogin);
			const user = {
					account : id,
					password : pw,
					autoLogin : autoLogin
			};
			
			$.ajax({
				type : "POST",
				url : "/user/loginCheck",
				headers : {
					"Content-Type" : "application/json"	
				},
				dataType : "text",
				data : JSON.stringify(user),
				success : function(data) {
					console.log("result : " + data);
					if(data === "idFail") {
						$('#signInId').css("background-color", "pink");
						$('#idCheck').html('<b style="font-size:14px;color:red;">[회원가입 먼저~~]</b>');
						$('#signInPw').val("");
						$('#signInId').focus();
						chk1 = false;
				    } else if(data === "pwFail") {
						$('#signInPw').css("background-color", "pink");
						$('#signInPw').val("");
						$('#signInPw').focus();
						$('#pwCheck').html('<b style="font-size:14px;color:red;">[비밀번호가 틀렸어요!]</b>');
						chk2 = false;
					} else if(data === "loginSuccess") {
						self.location="/";
					}
				
				},
				error : function() {
					console.log("통신 실패! 으이구!");
				}
			});
		} else {
			alert("입력정보를 다시 확인하세요.");
		}
		
	});

	
	
});//end JQuery

</script>


<!-- 
<script>
//sttart JQuery
$(function() {
	// 아이디 중복확인 키업 이벤트
	$("#user_id").keyup(function() {
		// 아이디가 공백일 경우 상태를 표시해줌
		if ($(this).val() === "") {
			$(this).css("background-color", "pink");
			$("#idChk").html("<b style = 'font-size : 14px; color : red;'>[아이디는 필수 정보!]</b>");
		} else {
			
			//ID 중복확인 비동기 통신
			const id = $(this).val();
			$.ajax({
				type: "POST",
				url: "/user/checkId",
				headers : {
					"Content-Type" : "application/json"
				},
				dataType : "text",
				data : id,
				success : function(result) {
					if (result === "OK") {
						$("#user_id").css("background-color", "aqua");
						$("#idChk").html("<b style = 'font-size : 14px; color : green;'>[아이디 사용 가능!]</b>");
					
					} else {
						$("#user_id").css("background-color", "pink");
						$("#idChk").html("<b style = 'font-size : 14px; color : red;'>[아이디 중복됨!]</b>");
						
					}
				},
				error : function() {
					console.log("통신 실패!");
				}
			});
			
	
		}
	})
	
	// 회원가입 버튼 클릭 이벤트
	$("#signup-btn").click(function() {
		
		// 아이디 정보
		const id = $("#user_id").val();
		console.log("id : " + id);
		
		// 패스워드 정보
		const pw = $("#password").val();
		console.log("pw : " + pw);
		
		// 이름 정보
		const name = $("#user_name").val();
		console.log("name : " + name);
		
		const user = {
			account : id,
			password : pw,
			name : name
		};
		
		//클라이언트에서 서버와 통신하는  ajax 함수 (비동기 통신)
		$.ajax({
			type : "POST", // 서버에 전송하는 HTTP 요청 방식
			url : "/user/", // 서버요청 URI 앞에는 url이지만 uri만 적어도됨 앞부분만
			headers : {
				"Content-Type" : "application/json"
			}, // 요청 헤더 정보
			dataType : "text", // 응답받을 데이터의 형태 xml, html, json 위에서 joinSuccess를 보내기때문에 이걸하는거임
			data : JSON.stringify(user), // 서버로 전송할 데이터
			success : function(result) { // 함수의 매개변수는 통신 성공시의 데이터가 저장될 곳
				console.log("통신 성공 : " + result);
				if (result === "joinSuccess") {
					alert("회원가입에 성공했습니다!!!");
					location.href = "/";
				} else {
					alert("회원가입에 실패했습니다.");
					
				}
			}, // 통신 성공시 처리할 내용들을 함수 내부에 작성
			error : function() {
				console.log("통신 실패!");
			} // 통신 실패시 처리할 내용들을 함수 내부에 작성
		});
	});
}); // end JQuery
</script>
 -->
 
 
 
<!-- 
<script src="<c:url value='/js/izone-user-validation.js'/>"></script>

 -->













#UserVO.java
package com.spring.mvc.user.model;

import java.util.Date;

public class UserVO {
	private String account;
	private String password;
	private String name;
	private Date regDate;
	
	// 자동로그인 체크 여부
	private boolean autoLogin;
	
	private String sessionId;
	private Date limitTime;
	
	
	
	public boolean isAutoLogin() {
		return autoLogin;
	}
	public void setAutoLogin(boolean autoLogin) {
		this.autoLogin = autoLogin;
	}
	public String getAccount() {
		return account;
	}
	public void setAccount(String account) {
		this.account = account;
	}
	public String getPassword() {
		return password;
	}
	public void setPassword(String password) {
		this.password = password;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public Date getRegDate() {
		return regDate;
	}
	public void setRegDate(Date regDate) {
		this.regDate = regDate;
	}
	public String getSessionId() {
		return sessionId;
	}
	public void setSessionId(String sessionId) {
		this.sessionId = sessionId;
	}
	public Date getLimitTime() {
		return limitTime;
	}
	public void setLimitTime(Date limitTime) {
		this.limitTime = limitTime;
	}
	@Override
	public String toString() {
		return "UserVO [account=" + account + ", password=" + password + ", name=" + name + ", regDate=" + regDate
				+ ", autoLogin=" + autoLogin + ", sessionId=" + sessionId + ", limitTime=" + limitTime + "]";
	}
	
	
	
	
	
	

}







##############################################################################
73)자동로그인(브라우저 종료 후 서버접근시 자동로그인처리)

src/main/resources/sql 
#-- 자동 로그인 관련 컬럼 추가( 작성 후 db에 복사붙여넣기 해서 만들어라)

ALTER TABLE mvc_user ADD COLUMN session_id VARCHAR(80) NOT NULL DEFAULT 'none';
ALTER TABLE mvc_user ADD COLUMN limit_time TIMESTAMP;


#컬럼 추가됐으니 UserVO에도 필드 및 getter,setter 추가

#자동로그인 쿠키값 DB저장처리
IUserMapper.java
// 자동로그인 쿠키값 DB저장처리
	void keepLogin();

#UserMapper.xml에 sql 추가
<!--  자동 로그인을 체크할 경우 쿠키 값(세션아이디)와 유지 시간을 갱신 -->

#IUserService.java, UserService에도 메서드추가
	// 자동로그인 쿠키값 DB저장처리
	void keepLogin();

#keppLogin() 매개변수 처리
	-limitDate 만들기(초로 날리면안되고 날짜로 타임스탬프로 만들어서 보내야하니까)
		-현재 시간에서 3개월이 지난 시점의 밀리초를 아래 Date에 생성자로 넣어서 날짜로 변경해줌

	-매개변수 3개 각각줘라, sessionId, limitDate, account
		-이렇게하면 에러가남. 마이바티스인 mapper.xml에 각각 데이터를 따로보내면안됨. 하나로 엮어야됨
		-그래서 클래스로 엮어서 객체로 보낼수도 있지만 이번엔 HashMap 객체를 이용해서 Mapper에서 키값으로 전달받아봐라



#이제는 사이트에 진입시에 바로 로그인되도록 컴퓨터에서 쿠키값(sessionid)를 읽고 db에 해당 sessionid인 회원정보를 받아와서
	login session을 주어서 로그인바로 시켜라
	-세션정보조회메서드추가
		// 세션 아이디를 통한 회원정보 조회 기능
		UserVO getUserWithSessionId(String sessionId);
	-세션정보조회 sql 추가
		-추가된 컬럼에 대해 resultMap 수정해야함

#인터셉터생성
com.spring.mvc.commons.interceptor.AutoLoginInterceptor

1. 자동 로그인 쿠키가 있는지 여부 확인
		//	-쿠키(loginCokkie)의 존재 여부 확인
2. db에서 쿠키값과 일치하는 세션 아이디를 가진 회원의 정보를 조회

3. 해당 쿠키값과 일치하는 세션아이디를 가진 회원정보가 있다면 login이라는 이름에 해당 user의 객체를 값으로 하여 집어넣어서 
	접속시 바로 로그인되도록 하기

#servlet-config
1.위에서 만든 인터셉터 빈등록
2.시작시 디스패쳐 다음에 컨트롤러 넘어가기전에 interceptor 설정
	-경로, 어떤 빈객체쓸건지

#크롬에서 설정-검색의 쿠키검색-쿠키삭제->다시 컨텍스트루트경로로 접근하면 이번엔 자동로그인안됨 f12해서 봐도 로그인쿠키 사라진걸 확인
	그후 다시 로그인 후 브라우저 종료해서 세션만료시키고 들어오면 또 자동 로그인됨을 확인

#여기까지하면 서버종료후 다시켰을때나 클라이언트 브라우저 종료된후 다시켜도(세션이 브라우저종료로 객체할당해제 되어도) 들어와진다
	-아직 로그아웃처리는 안된다.(로그아웃시 session_id정보를 삭제하는거 말이다)
	-현재 로그아웃을 누르면 다시 홈으로 가니 interceptor가 또 클라이언트의 쿠키를 받아와서 로그인시킨다.
		즉 무한루프에 빠지는 것이다. 그래서 로그아웃을하며 db상의 session_id정보를 삭제해야한다.
##############################################################################

답: 나머지 필요한건 github에서 봐라 붙여넣으니 복잡하다
	-UserController는 아랫문제 답에 있다.


#UserService
package com.spring.mvc.user.service;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

import com.spring.mvc.user.model.UserVO;
import com.spring.mvc.user.repository.IUserMapper;


@Service
public class UserService implements IUserService {

	@Autowired
	private IUserMapper mapper;
	
	@Override
	public void register(UserVO user) {
		// TODO Auto-generated method stub
		System.out.println("암호화 전 : " + user.getPassword());
		
		// 회원 비밀번호를 암호화 인코딩
		BCryptPasswordEncoder encoder = new BCryptPasswordEncoder();
		
		// 비밀번호를 암호화하여 다시 user 객체에 저장
		String securePw = encoder.encode(user.getPassword());
		user.setPassword(securePw);

		System.out.println("암호화 후 : " + securePw);
		mapper.register(user);
	}
	
	@Override
	public Integer checkId(String account) {
		// TODO Auto-generated method stub
		return mapper.checkId(account);
	}
	
	@Override
	public void delete(String account) {
		// TODO Auto-generated method stub
		mapper.delete(account);
	}
	
	@Override
	public UserVO selectOne(String account) {
		// TODO Auto-generated method stub
		return mapper.selectOne(account);
	}
	
	@Override
	public List<UserVO> selectAll() {
		// TODO Auto-generated method stub
		return mapper.selectAll();
	}
	
	
	@Override
	public void keepLogin(String sessionId, Date limitDate, String account) {
		// TODO Auto-generated method stub
		Map<String, Object> datas = new HashMap<>();
		datas.put("sessionId", sessionId);
		datas.put("limitDate", limitDate);
		datas.put("account", account);
				
		mapper.keepLogin(datas);
	}
	
	@Override
	public UserVO getUserWithSessionId(String sessionId) {
		// TODO Auto-generated method stub
		return mapper.getUserWithSessionId(sessionId);
	}
}


#IUserMapper.java

package com.spring.mvc.user.repository;

import java.util.List;
import java.util.Map;

import com.spring.mvc.user.model.UserVO;

public interface IUserMapper {
	// 회원 가입 기능
	void register(UserVO user);
	
	// id 중복체크 기능
	Integer checkId(String account);
	
	// 회원 탈퇴 기능
	void delete(String account);
	
	// 회원 정보 조회기능
	UserVO selectOne(String account);
	
	// 회원 정보 전체조회 기능
	List<UserVO> selectAll();
	
	// 자동로그인 쿠키값 DB저장처리
	void keepLogin(Map<String, Object> datas);
	
	// 세션 아이디를 통한 회원정보 조회 기능
	UserVO getUserWithSessionId(String sessionId);
}


#UserMapper.xml

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
 <mapper namespace= "com.spring.mvc.user.repository.IUserMapper">
 	<!--  회원가입 SQL -->
 	<insert id = "register">
 		INSERT INTO mvc_user
 			(account, password, name)
 		VALUES (#{account}, #{password}, #{name})
 	</insert>
 	
 	<!--  아이디중복체크확인을 위한 sql  -->
 	<select id = "checkId" resultType = "Integer">
 		SELECT COUNT(*)
 		FROM mvc_user
 		WHERE account = #{account}
 	</select>
 	<!--  회원 탈퇴 SQL -->
 	<delete id = "delete">
 		DELETE FROM mvc_user
 		WHERE account = #{account}
 	</delete>
 	
 	
 	<!--  회원정보 조회 -->
 	<select id = "selectOne" resultMap = "UserResultMap">
 		SELECT *
 		FROM mvc_user
 		WHERE account = #{account}
 	</select>
 	
 	<!--  회원정보 전체 조회 -->
 	<select id = "selectAll" resultMap = "UserResultMap">
 		SELECT *
 		FROM mvc_user
 	</select>
 	
 	<!--  자동 로그인을 체크할 경우 쿠키 값(세션아이디)와 유지 시간을 갱신 -->
 	<update id = "keepLogin">
 		UPDATE mvc_user
 		SET session_id = #{sessionId},
 			limit_time = #{limitDate}
 		WHERE account = #{account}
 	</update>
 	
 	
 	<!-- 
 		자동 로그인을 했던 회원이 사이트 재방문시 로컬에 저장된 쿠키값과 일치하는 회원의 정보를 조회하는 SQL
 	 -->
 	 
 	 <select id = "getUserWithSessionId" resultMap = "UserResultMap">
 	 	SELECT *
 	 	FROM mvc_user
 	 	WHERE session_id = #{sessionId}
 	 </select>
 	 
 	 
 	 <!--  DB컬럼명과 VO클래스의 필드가 다름으로 ResultMap세팅해야함 -->
 	<resultMap id = "UserResultMap" type = "com.spring.mvc.user.model.UserVO">
 		<result property="account" column="account"/>
 		<result property = "password" column = "password"/>
 		<result property = "name" column = "name"/>
 		<result property = "regDate" column = "reg_date" />
 		<result property = "sessionId" column = "session_id" />
 		<result property = "limitTime" column = "limit_time" />
 	</resultMap>
 </mapper>

#servlet-config

<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- 정적자원 (html, css, img, js)등을 URI 절대 경로로 사용하기 위한 매핑처리 -->
	
	<resources mapping="/resources/**" location="/resources/" />
	<resources mapping = "/css/**" location = "/resources/css/"/>
	<resources mapping = "/js/**" location = "/resources/js/"/>
	<resources mapping = "/img/**" location = "/resources/img/"/>
	<resources mapping = "/scss/**" location = "/resources/scss/"/>
	<resources mapping = "/vendor/**" location = "/resources/vendor/"/>
	
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<context:component-scan base-package="com.spring.mvc" />
	<!-- 인터셉터 빈 등록 -->
	<beans:bean id = "testInterceptor" class = "com.spring.mvc.commons.interceptor.TestInterceptor"/>
	<beans:bean id = "boardInterceptor" class = "com.spring.mvc.commons.interceptor.BoardInterceptor"/>
	<beans:bean id = "autoLoginInterceptor" class = "com.spring.mvc.commons.interceptor.AutoLoginInterceptor"/>		
		
	<interceptors>
		<interceptor>
			<mapping path = "/test1"/>
			<mapping path = "/test2"/>
			<beans:ref bean = "testInterceptor" />
		</interceptor>
		<interceptor>
			<mapping path = "/board/write"/>
			<mapping path = "/board/modify"/>
			<mapping path = "/board/delete"/>
			<beans:ref bean = "boardInterceptor" />
		</interceptor>
		
		<interceptor>
			<mapping path = "/"/>
			<beans:ref bean = "autoLoginInterceptor"/>
		</interceptor>
	</interceptors>
	
	
	
</beans:beans>



#UserVO.java
package com.spring.mvc.user.model;

import java.util.Date;

public class UserVO {
	private String account;
	private String password;
	private String name;
	private Date regDate;
	
	// 자동로그인 체크 여부
	private boolean autoLogin;
	
	private String sessionId;
	private Date limitTime;
	
	
	
	public boolean isAutoLogin() {
		return autoLogin;
	}
	public void setAutoLogin(boolean autoLogin) {
		this.autoLogin = autoLogin;
	}
	public String getAccount() {
		return account;
	}
	public void setAccount(String account) {
		this.account = account;
	}
	public String getPassword() {
		return password;
	}
	public void setPassword(String password) {
		this.password = password;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public Date getRegDate() {
		return regDate;
	}
	public void setRegDate(Date regDate) {
		this.regDate = regDate;
	}
	public String getSessionId() {
		return sessionId;
	}
	public void setSessionId(String sessionId) {
		this.sessionId = sessionId;
	}
	public Date getLimitTime() {
		return limitTime;
	}
	public void setLimitTime(Date limitTime) {
		this.limitTime = limitTime;
	}
	@Override
	public String toString() {
		return "UserVO [account=" + account + ", password=" + password + ", name=" + name + ", regDate=" + regDate
				+ ", autoLogin=" + autoLogin + ", sessionId=" + sessionId + ", limitTime=" + limitTime + "]";
	}
	
	
	
	
	
	

}



#AutoLoginInterceptor.java
package com.spring.mvc.commons.interceptor;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;
import org.springframework.web.util.WebUtils;

import com.spring.mvc.user.model.UserVO;
import com.spring.mvc.user.service.IUserService;

public class AutoLoginInterceptor extends HandlerInterceptorAdapter{
	@Autowired 
	private IUserService service;
	
	@Override
	public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)
			throws Exception {
		// TODO Auto-generated method stub
		
		// 1. 자동 로그인 쿠키가 있는지 여부 확인
		//	-쿠키(loginCokkie)의 존재 여부 확인
		/*
		Cookie[] cookies = request.getCookies(); // 클라이언트의 모든 쿠키를 뽑아옴 그로인해 아래문제발생
		for (Cookie cookie : cookies) {
			if (cookie.getName().equals("loginCookie")) {
				//// 이런식으로 jsp에선 했는데 spring에선 원하는 쿠키만 바로 빼올수있다.
				break;
			}
		}
		*/
		HttpSession session = request.getSession();
		
		Cookie loginCookie = WebUtils.getCookie(request, "loginCookie");
		
		if (loginCookie != null) { // 자동로그인을 했다면
			
			//2. db에서 쿠키값과 일치하는 세션 아이디를 가진 회원의 정보를 조회
			UserVO user = service.getUserWithSessionId(loginCookie.getValue());
			
			if (user != null) {
				session.setAttribute("login", user);
				
			}
		}
		
		return true; // 자동로그인이 되야하는 클라이언트든 아니든 페이지로 안내는 해야하기때문에 true를 해야함
	}
}

















##############################################################################
74)자동로그인 로그아웃처리

로그아웃할때
1)클라이언트에 있는 쿠키를 삭제해야함

2)db에 session_id를 none으로 바꿔야함

			// 로그아웃 시 자동 로그인 쿠키 삭제 및 해당 회원 정보에서 session_id 제거
			/*
			 * 1.loginCookie를 읽어온뒤 해당 쿠키가 존재하는지 여부 확인
			 * 2.쿠키가 존재한다면 쿠키의 수명을 0초로 다시 설정한 후 (setMaxAge사용) 
			 * 3.응답객체를 통해 로컬에 0초짜리 쿠키 재전송 -> 쿠키삭제의 의미란 이런것이다!
			 * 4.service를 통해 keepLogin을 호출하여 DB컬럼 레코드 재설정(session_id -> "none", 
			 * limit_time -> 현재시간으로)
			 */

UserController.java의 logout 처리 메소드만 해결하면 됨
##############################################################################

답:


package com.spring.mvc.user.controller;

import java.util.Date;
import java.util.List;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.util.WebUtils;

import com.spring.mvc.user.model.UserVO;
import com.spring.mvc.user.service.IUserService;

@RestController
@RequestMapping("/user")
public class UserController {
	@Autowired
	private IUserService service;
	
	//회원가입 요청 처리
	//Rest-api에서 Insert -> POST
	
	@PostMapping("/")
	public String register(@RequestBody UserVO user) {
		System.out.println("/user : POST");
		System.out.println("param : " + user);
		
		service.register(user);
		return "joinSuccess";
	}
	
	// 아이디 중복확인 요청처리
	@PostMapping("/checkId")
	public String checkId(@RequestBody String account) {
		System.out.println("/user/checkId : GET 요청 발생!");
		System.out.println("parameter : " + account);
		String result = null;
		
		Integer checkNum = service.checkId(account);
		if (checkNum == 1) {
			System.out.println("아이디가 중복됨!");
			result = "NO";
		} else {
			System.out.println("아이디 사용 가능!");
			result = "OK";
		}
		
		return result;
	}
	
	// 로그인 요청 처리
	@PostMapping("/loginCheck")
//	public String loginCheck(@RequestBody UserVO inputData) {
//	public String loginCheck(@RequestBody UserVO inputData, 
//								HttpServletRequest request) {
	public String loginCheck(@RequestBody UserVO inputData,
								HttpSession session, HttpServletResponse response) {
		// 서버에서 세션 객체를 얻는 방법.
		// 1.HttpServletRequest 객체 사용
//		HttpSession session = request.getSession();
		// 2.HttpSession 객체 사용
		System.out.println("parameter: " + inputData);
		
		String result = null;
		/*
		 # 클라이언트가 전송한 id값과 pw값을 가지고 DB에서 회원의 정보를 조회해서 불러온다음
		 	값 비교를 통해
		 	1. 아이디가 없을 경우 클라이언트측으로 문자열 "idFail" 전송
		 	2. 비밀번호가 틀렸을 경우 문자열 "pwFail" 전송
		 	3. 로그인 성공시 문자열 "loginSuccess" 전송
		 */
		
		BCryptPasswordEncoder encoder = new BCryptPasswordEncoder();
		UserVO dbData = service.selectOne(inputData.getAccount());
		
		if (dbData == null) {
			result = "idFail";
			return result;
		}
		
		{ // id가 있는 경우
			if (!encoder.matches(inputData.getPassword(), dbData.getPassword())) {
				result = "pwFail";
				return result;
			}
			
			
			session.setAttribute("login", dbData);
			result = "loginSuccess";
			
			
			long limitTime = 60 * 60 * 24 * 90;
			// 자동 로그인 체크시 처리
			if (inputData.isAutoLogin()) {
				
				
				Cookie loginCookie = new Cookie("loginCookie", session.getId());
				loginCookie.setPath("/");
				loginCookie.setMaxAge((int) limitTime);
				
				response.addCookie(loginCookie);
				
				long expireDate = System.currentTimeMillis() + (limitTime * 1000);
				//현재 시간에서 3개월이 지난 시점의 밀리초를 아래 Date에 생성자로 넣어서 날짜로 변경해줌
				Date limitDate = new Date(expireDate);
						
				service.keepLogin(session.getId(), limitDate, inputData.getAccount());
			}
		}
		
		return result;
	}
	
	//로그아웃 요청처리
	
	/* 기초적인방법
	 @GetMapping("/logout")
	public void logout(HttpSession session, HttpServletResponse response) {
		UserVO user = (UserVO) session.getAttribute("login");
		
		if (user != null) {
			session.removeAttribute("login"); //이거까지하면 더 깔끔 아래 무효화만해도됨
			session.invalidate(); // 세션무효화
			response.sendRedirect("/");
		}
	}
	 * 
	 */
	@GetMapping("/logout")
	public ModelAndView logout(HttpSession session, HttpServletRequest request, 
								HttpServletResponse response) {
		UserVO user = (UserVO) session.getAttribute("login");
		
		if (user != null) {
			session.removeAttribute("login"); //이거까지하면 더 깔끔 아래 무효화만해도됨
			session.invalidate(); // 세션무효화
			
			
			// 로그아웃 시 자동 로그인 쿠키 삭제 및 해당 회원 정보에서 session_id 제거
			/*
			 * 1.loginCookie를 읽어온뒤 해당 쿠키가 존재하는지 여부 확인
			 * 2.쿠키가 존재한다면 쿠키의 수명을 초로 다시 설정한 후 (setMaxAge사용) 
			 * 3.응답객체를 통해 로컬에 0초짜리 쿠키 재전송 -> 쿠키삭제의 의미란 이런것이다!
			 * 4.service를 통해 keepLogin을 호출하여 DB컬럼 레코드 재설정(session_id -> "none", 
			 * limit_time -> 현재시간으로)
			 */
			
			Cookie loginCookie = WebUtils.getCookie(request, "loginCookie");
			
			if (loginCookie != null) {
				loginCookie.setMaxAge(0);
				response.addCookie(loginCookie);
				
				Date limitDate = new Date(System.currentTimeMillis());
//				service.keepLogin("none", limitDate, user.getAccount()); 이렇게해도된다 근데 그냥 newDate()만 해도 된다.
				service.keepLogin("none", new Date(), user.getAccount());
			}
			
		}
		
		
		return new ModelAndView("redirect:/");
//		return new ModelAndView("user/login"); // 뷰리절버에 보내서 login.jsp로 보내기
	}
	
	// 회원 탈퇴 요청 처리
//	@RequestMapping(value = "/", method = RequestMethod.DELETE)
	@DeleteMapping("/{account}")
	public String delete(@PathVariable String account) {
		
		service.delete(account);
		
		return "delSuccess";
	}

	@GetMapping("/{account}")
	public UserVO selectOne(@PathVariable String account) {
		return service.selectOne(account);
	}
	
	@GetMapping("/")
	public List<UserVO> selectAll() {
		return service.selectAll();
	}
}






