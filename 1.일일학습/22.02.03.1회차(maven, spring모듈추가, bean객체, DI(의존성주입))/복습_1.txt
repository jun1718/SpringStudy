21.02.03.1회차
===============================================================================
*복습
===============================================================================


##############################################################################
1)Spring 환경구축 및 모듈 추가

1-1)매이븐 프로젝트 만들기
project : maven project
	-만들때 create a simple project해야 기본설정이 들어옴 
group id : com.spring 
Artifact id : basicReivew

	*메이븐 프로젝트 만드는 이유
		-필요한 라이브러리(모듈, API)에 관한 정보를 특정문서(pom.xml)에 정의해 놓으면 네트워크를 통해서
		 라이브러리들을 자동으로 설치해준다. 직접 수동으로 설치해서 집어넣을수도 있지만 메이븐프로젝트는 이렇게
		 자동설치의 이점이 있기에 사용한다.
	*메이븐 자동설치 전제조건
		-maven repository 사이트에서 라이브러리에 관한 정보가 정의된 것을 복사해와야함
			-maven repository : 메이븐 프로젝트에서 자동으로 모듈들 검색하여 설치할수있도록 관련 정보들을 모아놓은 사이트

1-2)프로젝트 기본 환경구축
encoding하여 web언어들이나 workspace, xml등 모두 utf-8인 유니코드로 변경
						-기존의 Korean, EUC로하면 ㄱ ㄴ ㄷ 을 못읽음
화면 블랙

1-3)설정추가(pom.xml)
	-설정추가는 앞으로 나올 dependencies 즉 의존성때문에 설치해야하는 모듈들을 묶어놓은 그룹 아래에 작성한다.
build 설정추가 : build안하고 모듈추가 즉 메이븐프로젝트의 기능을 사용가능한지 확인해바라
	-maven도 자바라이브러리중 하나이고 java와 본인간에 호환성을 맞추기위한 설정이 필요하다.
	-아래에서 build가 그설정이며 maven의 컴파일러는 뭘로할것이고 메이븐의 버젼은몇이고 자바의 버전은 1.8이고 등등의 설정이다.
		-이걸 설정추가안하면 maven프로젝트을 사용할수는 있나????
			-실험결과 가능, 기본값이 있는것으로 파악됨 다만 build하고나서 반드시 alt f5하여서 바뀐걸 알려줘야함
	<build>
		<plugins>
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.5.1</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
					<encoding>utf-8</encoding>
				</configuration>
			</plugin>
		</plugins>
	</build>

1-4)메이븐 기능인 모듈추가(pom.xml) 적용해보기
	-maven repository에서 사람들이 가장 많이받고 상위에있는걸 선택하면 된다.
	-이때 라이브러리가 어디에 저장되는가?
		-C:\Users\USER\.m2\repository\org\springframework
		-spring-context를 설치했지만 내부에는 파일이 엄청 많을건데 해당 context를 이용하기위한 의존성 파일들(라이브러리)
			까지 함께 추가된것으로 인지하면 되겠다.
		
spring 모듈 추가
	검색 keyword : spring-context => 5.1.5 설치(회사에선상관없는데 지금은 환경통일을위해 이렇게한다 아래도 마찬가지)

jstl 모듈 추가
	검색 keyword : jstl => 1.2버전



<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.spring</groupId>
	<artifactId>basicReview</artifactId>
	<version>0.0.1-SNAPSHOT</version>

	<dependencies>
		<!-- https://mvnrepository.com/artifact/org.springframework/spring-context -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>5.1.5.RELEASE</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/javax.servlet/jstl -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
		</dependency>

	</dependencies>

	<build>
		<plugins>
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.5.1</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
					<encoding>utf-8</encoding>
				</configuration>
			</plugin>
		</plugins>
	</build>
</project>

##############################################################################


답:


<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.spring</groupId>
	<artifactId>basic</artifactId>
	<version>0.0.1-SNAPSHOT</version>

	<!-- https://mvnrepository.com/artifact/org.springframework/spring-context -->
	<dependencies>
		<!-- Spring-context 모듈 -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>5.1.5.RELEASE</version>
		</dependency>

		<!-- jstl 모듈 -->
		<!-- https://mvnrepository.com/artifact/javax.servlet/jstl -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
		</dependency>
		
		
	</dependencies>
	<build>
		<plugins>
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.5.1</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
					<encoding>utf-8</encoding>
				</configuration>
			</plugin>
		</plugins>
	</build>
</project>




























##############################################################################
2)resources의 xml을 이용하여 spring 컨테이너에 객체 생성후 사용
	-Spring을 DI frame work 혹은 Ioc frame work 라고도 한다
	-xml에서 bean을 통해 객체를 만드는 코드를 작성하고 main code에서 xml을 실행시켜 bean객체가 만들어지면 그것이
		spring 컨테이너에 들어감

<package 생성> : com.spring.basic
	-위치 : src/main/java 디렉터리 내부
	-원래 루트 패키지는 gid와 아티팩트 id를 붙여서 만든다.
		-root 패키지: 모든 코드가 출발하는 첫번재 디렉토리

<class 생성>
	-위치 : com.spring.basic 패키지(루트패키지) 내부
	-클래스1 이름 : SpringTest
		-메서드 : hello()
			- "스프링 객체주입 테스트 ~"를 출력하는 메서드
	-클래스2 이름 : HelloSpring
		-메서드 : 없음

<xml 생성>
	-위치 : src/main/resources
		-resources가 설정이되는 xml 파일이 들어가는 곳임
		-java는 java의 코드들이 들어감 
			-resources 설정에 bean만들고 뭐하고 계속 쓰는이유가 java 코드는 안만지고 resources의 설정만
				바꾸면 논리적으로 간단하니까 그런거임
	-이름 : test-config.xml

xml생성후 해당코드 복사붙여넣기. 어떤건지는 나중에 배운다. 이거안하면 문제가 안풀리더라
<beans xmlns="http://www.springframework.org/schema/beans"  
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://www.springframework.org/schema/beans  
http://www.springframework.org/schema/beans/spring-beans.xsd">

</beans>



1)SpringTest클래스의 인스턴스를 HelloSpring에 만들어서 인스턴스의 hello()메서드 실행
-구석기시대방식으로 출력해보기
package com.spring.basicReview;

public class HelloSpring {
	public HelloSpring() {
		// TODO Auto-generated constructor stub
	}
	public static void main(String[] args) {
		SpringTest st = new SpringTest();
		st.hello();
	}

}

	
package com.spring.basicReview;

public class SpringTest {
	public SpringTest() {
		// TODO Auto-generated constructor stub
	}
	public void hello() {
		System.out.println("스프링 객체주입 테스트~~");
	}
}

	
-최신식으로 출력해보기(test-config.xml을 이용하여 설정에서 인스턴스를 만들고 그걸 전달받아서 구동)
	-bean id : test


<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
	http://www.springframework.org/schema/beans/spring-beans.xsd">
	
	<bean id = "test" class = "com.spring.basicReview.SpringTest" />
	
</beans>
 

package com.spring.basicReview;

import org.springframework.context.support.GenericXmlApplicationContext;

public class HelloSpring {
	public HelloSpring() {
		// TODO Auto-generated constructor stub
	}
	public static void main(String[] args) {
		GenericXmlApplicationContext ct = 
				new GenericXmlApplicationContext("classpath:test-config.xml");
		SpringTest st = ct.getBean("test", SpringTest.class);
		st.hello();
		
		ct.close();
	}

}






















##############################################################################
3)di(의존성주입) 
	-주입코드를(의존객체를) 넣는방법(의존성주입하는법)
			-의존객체 : 대상객체 
				-의존성이 있는 두 객체에는 대상객체와 의존적인 객체가 있다. 이때 대상객체가 의존객체다.
					-대상객체: 특정객체가 어느객체에 의존적일때 의존성을 충족시키는 객체가 대상객체임
				-쉽게말해서 의존객체는 충분조건, 의존적인 객체는 필요조건
		-구시대적(수동적 주입)
			-생성자를 이용해서 넣기
			-setter를 통한 의존성 주입

		-현시대적(자동적 주입)
			-생성자를 이용해서 넣기
			-setter를 통한 의존성 주입

<packages 생성>
	-위치 : src/main/java
	-이름 : com.spring.basic.ex01

<class 생성>
	-위치 : com.spring.basic.ex01 패키지
	-구조 : Chef -> Restaurant -> Hotel 형식으로 의존성 생성(생성자를 이용하여 의존성구현)

	-이름 : Chef
		-인스턴스 생성시 "요리사가 출근함!" 출력하게 클래스 생성
		-메서드 : cook()
			-"요리사가 요리를 합니다."를 출력하는 메서드 구현
	-이름 : Restaurant
		-field : chef라는 Chef 클래스의 인스턴스 주소를 담을 참조변수 생성(변수만 생성)
		-생성자에서 처리할 것
			-인스턴스 생성시 "레스토랑이 생성됨!" 출력하게 클래스 생성
			-생성자의 매개변수를 통해서 필드인 chef에 주소값 저장(즉 Chef 클래스의 인스턴스생성)
		-메서드 : orderDinner()
			-"저녁식사를 주문합니다."를 출력하는 메서드 구현
			-내부에서 Chef클래스의 인스턴스의 cook()메서드 실행

	-이름 : Hotel
		-field : Restaurant 클래스의 인스턴스 주소를 저장할 멤버변수 res 생성
		-생성자
			-인스턴스 생성시 "호텔이 생성됨!"을 출력
			-인스턴스 생성시 생성자매개변수를 통해 res field에 값저장
		-메서드 : reserveRestaurant()
			-해당 메서드를 실행시 "레스토랑을 예약합니다."를 출력
			-res field를 이용해서 orderDinner() 메서드 실행
			-즉 reserveRestaurant()메서드 실행함으로 Chef까지 의존관계 객체를 모두 사용


	-이름 : MainClass


package com.spring.basicReview.ex01;

public class Chef {

	public Chef() {
		// TODO Auto-generated constructor stub
		System.out.println("요리사가 출근함!!");
	}

	public void cook() {
		System.out.println("요리를 시작합니다! 레츠기릿");
	}
}

package com.spring.basicReview.ex01;

public class Restaurant {
	private Chef chef;
	
	public Restaurant(Chef chef) {
		// TODO Auto-generated constructor stub
		System.out.println("레스토랑 생성됨!!");
		this.chef = chef;
	}

	public void orderDinner() {
		System.out.println("요리를 주문받습니다.");
		chef.cook();
	}
}




package com.spring.basicReview.ex01;

public class Hotel {
	private Restaurant res;
	
	public Hotel(Restaurant res) {
		// TODO Auto-generated constructor stub
		System.out.println("hotel 생성됨!!");
		this.res = res;
	}
	
	public void reserveRestaurant() {
		System.out.println("레스토랑을 예약합니다.");
		res.orderDinner();
	}
}

		
1)MainClass에서 아래 출력결과가 나오도록 실행
1-1)수동적으로 의존성 주입
package com.spring.basicReview.ex01;

public class MainClass {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Hotel hotel = new Hotel(new Restaurant(new Chef()));
		hotel.reserveRestaurant();
	}
}


1-2)자동적으로(test-config.xml이용하여 의존성 해결 및 bean으로 객체 생성) 의존성 주입
	bean id 
		-chef
		-res
		-hotel
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
	http://www.springframework.org/schema/beans/spring-beans.xsd">
	
	<bean id = "test" class = "com.spring.basicReview.SpringTest" />
	
	<bean id = "chef" class = "com.spring.basicReview.ex01.Chef" />
	
	<bean id = "res" class = "com.spring.basicReview.ex01.Restaurant">
		<constructor-arg ref = "chef" />
	</bean>
	
	<bean id = "hotel" class = "com.spring.basicReview.ex01.Hotel">
		<constructor-arg ref = "res" />
	</bean>
	
	
</beans>
 




package com.spring.basicReview.ex01;

import org.springframework.context.support.GenericXmlApplicationContext;

public class MainClass {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		GenericXmlApplicationContext ct = 
				new GenericXmlApplicationContext("classpath:test-config.xml");		
		Hotel hotel = ct.getBean("hotel", Hotel.class);
		
		hotel.reserveRestaurant();
	}
}




<출력결과>
요리사가 출근함!
레스토랑이 생성됨!
호텔이 생성됨!
레스토랑을 예약합니다.
저녁식사를 주문합니다.
요리사가 요리를 합니다.






##############################################################################


답:





package com.spring.basic.ex01;

public class Chef {
	public Chef() {
		System.out.println("요리사가 출근함!");
	}
	public void cook() {
		System.out.println("요리사가 요리를 합니다.");
	}
}



package com.spring.basic.ex01;

public class Restaurant {
	private Chef chef;
	
	public Restaurant(Chef chef) {
		// TODO Auto-generated constructor stub
		this.chef = chef;
		
		System.out.println("레스토랑이 생성됨!");
	}
	
	public void orderDinner() {
		System.out.println("저녁식사를 주문합니다.");
		chef.cook();
	}
}



package com.spring.basic.ex01;

public class Hotel {
	
	private Restaurant res;
	
	public Hotel(Restaurant res) {
		this.res = res;
		System.out.println("호텔이 생성됨!");
	}
	
	public void reserveRestaurant() {
		System.out.println("레스토랑을 예약합니다.");
		res.orderDinner();
	}
}




1)MainClass에서 아래 출력결과가 나오도록 실행
1-1)수동적으로 의존성 주입

package com.spring.basic.ex01;

import org.springframework.context.support.GenericXmlApplicationContext;

public class MainClass {

	public static void main(String[] args) {
		Hotel hotel = new Hotel(new Restaurant(new Chef()));
		hotel.reserveRestaurant();
	}

}




1-2)자동적으로(test-config.xml이용하여 의존성 해결 및 bean으로 객체 생성) 의존성 주입

1-2-1)test-config.xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"  
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://www.springframework.org/schema/beans  
http://www.springframework.org/schema/beans/spring-beans.xsd">
	<bean id = "test" class = "com.spring.basic.SpringTest" />
	
	<!--  Hotel 객체와 의존객체들의 빈 등록 및 의존성 주입설정 -->
	<bean id = "chef" class = "com.spring.basic.ex01.Chef" />
	<bean id = "res" class = "com.spring.basic.ex01.Restaurant" >
		<constructor-arg ref = "chef" />
	</bean>
	<bean id = "hotel" class = "com.spring.basic.ex01.Hotel" >
		<constructor-arg ref = "res" />
	</bean>
</beans>


1-2-2)MainClass
package com.spring.basic.ex01;

import org.springframework.context.support.GenericXmlApplicationContext;

public class MainClass {

	public static void main(String[] args) {
		GenericXmlApplicationContext ct =
				new GenericXmlApplicationContext("classpath:test-config.xml");
		Hotel hotel = ct.getBean("hotel", Hotel.class);
		
		hotel.reserveRestaurant();
	}
}



##############################################################################

답:

<class 생성> : HelloSpring은 아래 1번 답에 있음
package com.spring.basic;

public class SpringTest {
	public void hello() {
		System.out.println("스프링 객체주입 테스트 ~");
	}
}

<xml 생성>
	-xml검색후 그냥 xml파일 생성하면됨
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"  
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://www.springframework.org/schema/beans  
http://www.springframework.org/schema/beans/spring-beans.xsd">
	<bean id = "test" class = "com.spring.basic.SpringTest" />
</beans>



1)SpringTest클래스의 인스턴스를 HelloSpring에 만들어서 인스턴스의 hello()메서드 실행

-구석기시대방식으로 출력해보기
		package com.spring.basic;

import org.springframework.context.support.GenericXmlApplicationContext;

public class HelloSpring {
	public static void main(String[] args) {
		System.out.println("안녕 스프링~!");
		
		SpringTest st = new SpringTest();
		st.hello();
	}
}





-최신식으로 출력해보기(test-config.xml을 이용하여 설정에서 인스턴스를 만들고 그걸 전달받아서 구동)
	-위의 xml과 함께 호환되어야함.

package com.spring.basic;

import org.springframework.context.support.GenericXmlApplicationContext;

public class HelloSpring {
	public static void main(String[] args) {

		GenericXmlApplicationContext ct = 
				new GenericXmlApplicationContext("classpath:test-config.xml");
		SpringTest st = ct.getBean("test", SpringTest.class);
		
		st.hello();
		ct.close();
	}
}
